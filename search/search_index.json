{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome page \u00b6 Here I will place documentation for my current minecraft mods (mostly ComputerCraft related).","title":"Welcome page"},{"location":"#welcome-page","text":"Here I will place documentation for my current minecraft mods (mostly ComputerCraft related).","title":"Welcome page"},{"location":"digitalitems/","text":"Digital Items 3.0 \u00b6 This project is the successor to the original Digital Items 2 mod. There is no significat diferrences from Digital Items 2 , but all things related to energy consumption are not implemented yet. This mod allows you to turn your items into numbers (called IDs), which you can store or send to your friends and then turn them back into their item form. Every ID is unique, can't be guessed, and can only be used once. No duplication or cloning of items is possible. The process of turning an item into an ID is called 'digitization' and turning it back is called 'rematerialization'. Items that are digitized begin to 'decay'. If they are left digitized for too long, they are gone. You can reset their 'decay countdown' by 'refreshing' an item ID or partially rematerializing it. You can retrieve information about digitized items via their ID and items inside the digitizer itself. All of these operations are performed inside the 'digitizer', and require a configurable amount of energy. These operations are exposed in the form of a peripheral for the CC: Tweaked mod. Supported versions \u00b6 Forge : 1.20.x (features) Fabric : 1.20.x (features) Q. & A. \u00b6 How do I use this mod? \u00b6 Place a digitizer and computer (either directly next to one another or connected with network cables and modems). Place the item you want to digitize inside the digitizer. Now you can interact with the digitizer with lua. Use digitizer = peripheral.find(\"digitizer\") to find the peripheral and bind it to the digitizer variable. The following methods are available to call on the digitizer peripheral: inventory methods from CC:T to make it will like actual inventory peripheral getDecayEnabled() Returns whether the digital items decay. getDecayTicks() Returns the duration in ticks after which digital items decay. digitize() Digitizes the item stack and returns the ID. digitizeAmount(amount) Like digitize() but only digitizes amount items leaving the rest in the digitizer. rematerialize(id) Rematerializes the item stack associated with the provided ID and places it inside the digitizer. rematerializeAmount(id, amount) Like rematerialize(id) but only rematerializes amount items. Resets the decay countdown for the remaining stack. refresh(id) Refreshes the item stack associated with that ID. getIDInfo(id) Returns a table containing currentTime (current world age in ticks), digitizedAt (time when the item stack got digitized), decaysAt (time when the item stack will decay), lastRefresh (time when the item stack got last refreshed) and item containing information about the actual item stack. Is it compatible with the original mod? \u00b6 Nope","title":"Digital Items 3.0"},{"location":"digitalitems/#digital-items-30","text":"This project is the successor to the original Digital Items 2 mod. There is no significat diferrences from Digital Items 2 , but all things related to energy consumption are not implemented yet. This mod allows you to turn your items into numbers (called IDs), which you can store or send to your friends and then turn them back into their item form. Every ID is unique, can't be guessed, and can only be used once. No duplication or cloning of items is possible. The process of turning an item into an ID is called 'digitization' and turning it back is called 'rematerialization'. Items that are digitized begin to 'decay'. If they are left digitized for too long, they are gone. You can reset their 'decay countdown' by 'refreshing' an item ID or partially rematerializing it. You can retrieve information about digitized items via their ID and items inside the digitizer itself. All of these operations are performed inside the 'digitizer', and require a configurable amount of energy. These operations are exposed in the form of a peripheral for the CC: Tweaked mod.","title":"Digital Items 3.0"},{"location":"digitalitems/#supported-versions","text":"Forge : 1.20.x (features) Fabric : 1.20.x (features)","title":"Supported versions"},{"location":"digitalitems/#q-a","text":"","title":"Q. &amp; A."},{"location":"digitalitems/#how-do-i-use-this-mod","text":"Place a digitizer and computer (either directly next to one another or connected with network cables and modems). Place the item you want to digitize inside the digitizer. Now you can interact with the digitizer with lua. Use digitizer = peripheral.find(\"digitizer\") to find the peripheral and bind it to the digitizer variable. The following methods are available to call on the digitizer peripheral: inventory methods from CC:T to make it will like actual inventory peripheral getDecayEnabled() Returns whether the digital items decay. getDecayTicks() Returns the duration in ticks after which digital items decay. digitize() Digitizes the item stack and returns the ID. digitizeAmount(amount) Like digitize() but only digitizes amount items leaving the rest in the digitizer. rematerialize(id) Rematerializes the item stack associated with the provided ID and places it inside the digitizer. rematerializeAmount(id, amount) Like rematerialize(id) but only rematerializes amount items. Resets the decay countdown for the remaining stack. refresh(id) Refreshes the item stack associated with that ID. getIDInfo(id) Returns a table containing currentTime (current world age in ticks), digitizedAt (time when the item stack got digitized), decaysAt (time when the item stack will decay), lastRefresh (time when the item stack got last refreshed) and item containing information about the actual item stack.","title":"How do I use this mod?"},{"location":"digitalitems/#is-it-compatible-with-the-original-mod","text":"Nope","title":"Is it compatible with the original mod?"},{"location":"API/ai/","text":"AI API \u00b6 AI API responsible for controlling entities AI, toggling it and perform checks if it is enabled or disabled. Function Returns Description toggleAI(direction?: Direction ) Result Tries to toggle AI of entity in specific direction isAIEnabled(direction?: Direction ) boolean? Returns true if entity AI is enable, false if not and nil if there is no entity","title":"AI API"},{"location":"API/ai/#ai-api","text":"AI API responsible for controlling entities AI, toggling it and perform checks if it is enabled or disabled. Function Returns Description toggleAI(direction?: Direction ) Result Tries to toggle AI of entity in specific direction isAIEnabled(direction?: Direction ) boolean? Returns true if entity AI is enable, false if not and nil if there is no entity","title":"AI API"},{"location":"API/capture/","text":"Capture API \u00b6 Capture API allows moving block or entities with storing it internal data! So finally, you can move specific spawners and chests! Take a note, that released entity or block will be placed at front of turtle. Also, block can be placed only on empty space Warning Before 1.0.0, due to ComputerCraft limitations stored entity will be lost if you unequip turtle upgrade. Function Returns Description capture(mode: InteractionMode , direction?: Direction ) Result Tries to capture object: entity or block release() Result Tiers to release object: create entity or place block getCaptured() table Returns information about captured entity (including NBT data) My modpack have blocks or entities, that crash game when captured, what I can do? Add tag turtlematic:capture_blacklist to those blocks or entities.","title":"Capture API"},{"location":"API/capture/#capture-api","text":"Capture API allows moving block or entities with storing it internal data! So finally, you can move specific spawners and chests! Take a note, that released entity or block will be placed at front of turtle. Also, block can be placed only on empty space Warning Before 1.0.0, due to ComputerCraft limitations stored entity will be lost if you unequip turtle upgrade. Function Returns Description capture(mode: InteractionMode , direction?: Direction ) Result Tries to capture object: entity or block release() Result Tiers to release object: create entity or place block getCaptured() table Returns information about captured entity (including NBT data) My modpack have blocks or entities, that crash game when captured, what I can do? Add tag turtlematic:capture_blacklist to those blocks or entities.","title":"Capture API"},{"location":"API/configuration/","text":"Configuration API \u00b6 Configuration API allows a peripheral user to understand current peripheral limitations and how you can use it. Any additional limit, that provided by peripheral can be retrieved from getConfiguration() method. Values, that can be retrieved with help of this method are marked like valueInConfiguration in this documentation. Function Returns Description getConfiguration() table Returns table with configuration.","title":"Configuration API"},{"location":"API/configuration/#configuration-api","text":"Configuration API allows a peripheral user to understand current peripheral limitations and how you can use it. Any additional limit, that provided by peripheral can be retrieved from getConfiguration() method. Values, that can be retrieved with help of this method are marked like valueInConfiguration in this documentation. Function Returns Description getConfiguration() table Returns table with configuration.","title":"Configuration API"},{"location":"API/experience/","text":"Experience API \u00b6 This API is dedicated to XP manipulations: collecting it, moving out/to player and store it inside turtle. Warning Before 1.0.0, due to ComputerCraft limitations all stored XP will be lost if you unequip turtle upgrade. Function Returns Description getStoredXP() number Returns amount of stored XP getOwnerXP() number Returns amount of owner XP collectXP() number Collects XP in interactionRadius around turtle. Returns amount of collected XP suckOwnerXP(limit: number) Result[number] Tries to get XP from turtle owner not more that provided limit (but can be less). Returns XP amount that was obtained from owner sendXPToOwner(limit: number) Result[number] Tries to send XP to turtle owner not more that provided limit (but can be less). Returns XP amount that was sent to owner burnXP(limit: number) Result[number] Tries to transform XP to fuel not more that provided limit (but can be less). Returns XP amount that was transformed to fuel","title":"Experience API"},{"location":"API/experience/#experience-api","text":"This API is dedicated to XP manipulations: collecting it, moving out/to player and store it inside turtle. Warning Before 1.0.0, due to ComputerCraft limitations all stored XP will be lost if you unequip turtle upgrade. Function Returns Description getStoredXP() number Returns amount of stored XP getOwnerXP() number Returns amount of owner XP collectXP() number Collects XP in interactionRadius around turtle. Returns amount of collected XP suckOwnerXP(limit: number) Result[number] Tries to get XP from turtle owner not more that provided limit (but can be less). Returns XP amount that was obtained from owner sendXPToOwner(limit: number) Result[number] Tries to send XP to turtle owner not more that provided limit (but can be less). Returns XP amount that was sent to owner burnXP(limit: number) Result[number] Tries to transform XP to fuel not more that provided limit (but can be less). Returns XP amount that was transformed to fuel","title":"Experience API"},{"location":"API/fuel/","text":"Fuel API \u00b6 Most of the usage for fuel API comes when you're trying to degrease cooldown for specific operations. If you increase fuel consumption rate for peripheral, automatically it will decrease cooldowns after peripheral method usage (but not initial cooldowns). For example, if click operation required 1 fuel point to perform and will have 5 seconds cooldown, with fuel consumption 2 you can perform click operation one in 2.5 seconds, but in cost of 2 fuel point. Take a note that fuel point will grow faster, than cooldown drops. Basically, consumedFuel = 2^(fuelConsumtionRate - 1) . So fuelConsumtionRate 3 will require 4 fuel points, and fuelConsumtionRate 4 will require 8 fuel points, etc. Warning fuelConsumptionRate should be positive integer Function Returns Description getFuelLevel() number Returns current fuel level, for turtle is equivalent for turtle.getFuelLevel() getFuelMaxLevel() number Returns max fuel level, for turtle is equivalent for turtle.getFuelLimit() getFuelConsumptionRate() number Return current fuel consumption rate setFuelConsumptionRate(rate: number) nil Tries to set fuel consumption rate to new value. Will throw error if rate lower than 1 or bigger than maxFuelConsumptionRate","title":"Fuel API"},{"location":"API/fuel/#fuel-api","text":"Most of the usage for fuel API comes when you're trying to degrease cooldown for specific operations. If you increase fuel consumption rate for peripheral, automatically it will decrease cooldowns after peripheral method usage (but not initial cooldowns). For example, if click operation required 1 fuel point to perform and will have 5 seconds cooldown, with fuel consumption 2 you can perform click operation one in 2.5 seconds, but in cost of 2 fuel point. Take a note that fuel point will grow faster, than cooldown drops. Basically, consumedFuel = 2^(fuelConsumtionRate - 1) . So fuelConsumtionRate 3 will require 4 fuel points, and fuelConsumtionRate 4 will require 8 fuel points, etc. Warning fuelConsumptionRate should be positive integer Function Returns Description getFuelLevel() number Returns current fuel level, for turtle is equivalent for turtle.getFuelLevel() getFuelMaxLevel() number Returns max fuel level, for turtle is equivalent for turtle.getFuelLimit() getFuelConsumptionRate() number Return current fuel consumption rate setFuelConsumptionRate(rate: number) nil Tries to set fuel consumption rate to new value. Will throw error if rate lower than 1 or bigger than maxFuelConsumptionRate","title":"Fuel API"},{"location":"API/interaction/","text":"Interaction API \u00b6 Interaction API allows to fully simulate player left and right clicks. However, instead of simple simulation this API provides some benefits: All loot will be automatically collected For some core tiers tool will not be damaged Left clicks are always charged. So sword will always hit with full power Function Returns Description use(mode: InteractionMode , direction?: Direction ) Result Emulates rightClick with item in selected slot swing(mode: InteractionMode , direction?: Direction ) Result Emulates leftClick with item in selected slot","title":"Interaction API"},{"location":"API/interaction/#interaction-api","text":"Interaction API allows to fully simulate player left and right clicks. However, instead of simple simulation this API provides some benefits: All loot will be automatically collected For some core tiers tool will not be damaged Left clicks are always charged. So sword will always hit with full power Function Returns Description use(mode: InteractionMode , direction?: Direction ) Result Emulates rightClick with item in selected slot swing(mode: InteractionMode , direction?: Direction ) Result Emulates leftClick with item in selected slot","title":"Interaction API"},{"location":"API/introduction/","text":"Types and definitions \u00b6 This section of documentation will describe everything about APIs, that can be provided by different peripherals and general information how to read function tables. Take a note, that some peripherals (actually, a lot of them) will have extra functions besides supported APIs. Parameters description \u00b6 Functions defined like call_name(required_arg_1: arg_type_1, required_arg_2: arg_type_2, optional_arg: arg_type_3) . Some types will have additional limitations, like \"only positive numbers\", or \"only numbers in specific range\". In case when limitations are not met, function will throw exception. New data types \u00b6 Mostly this sections contains enums, that are need to be passed as strings. Enums are case-insensetive, so you can pass them as you want. Name Lua type Limitations interactionMode string Enum with values: any, block, entity direction string Enum with values: up, down Result boolean, string? - Result[T] T?, string? - Interaction mode \u00b6 All functions, that accept interactionMode as arguments, work with objects in line of sight. They will take as target the first object, that they found. You can force this functions to work only with blocks, or only with entities. Info You can get available interactionMode for specific APIs on peripheral documentation page. All available values is both , entity and block Warning Pretty important to note that a lot of entity interaction will be limited to specific entities. For example, Husbandry Automata Core allows to works only with animals. Always checks peripheral documentation page to understand its limitation with entities. Direction \u00b6 All functions, that accept direction as arguments, work with objects in line of sight. You can use this argument to change line of sight and fake peripheral player will begin to start to look down (or up). Result \u00b6 Result are always representing result of called operation. First argument will tell you is operation was successful and second one will tell you reason why operation is failed. Result can also be parametrized, for example as Result[number] , which means it will return operation result as first argument (or nil) and as second argument it will tell you reason why operation is failed. ItemQuery \u00b6 Warning Before 1.19.4, ItemQuery type did not exist, so instead of it you can use only the string version of this argument ItemQuery is a powerful argument, that is supposed to help you build filters for items, extracting them in a more precise way, than just item ID. You can pass to an argument, that has type ItemQuery a string, and it will become just a regular item ID filter. But you can also pass a table { nbt = \"<item nbt hash>\" , tag = \"minecraft:lapis_ores\" , displayName = \"Deepslate Lapis Lazuli Ore\" , name = \"minecraft:deepslate_lapis_ore\" } A table can have zero or more keys and all of them will be required from the item at once. So, for example, if you want to search for a written book with the name \"Small and Big Owls\", you can pass next itemQuery { name = \"minecraft:written_book\" , displayName = \"Small and Big Owls\" } BlockPos \u00b6 BlockPos is just generic table with three requied fields - x, y and z. So, something of this will be enough: { x = 5 , y = 7 , z = 8 } Warning In most cases block pos is expected to be relative to the target peripheral like in scan API BlockState \u00b6 BlockState is a type that is used to build block states that should be mimicked. It is a very complex and context-dependent type, so if you experiment with it, you should be prepared to face a lot of Lua exceptions. Let's start with the basics. If you want to just mimic block, you can use {block = \"minecraft:oak_log\"} to mimic block by ID. There are a number of extra attributes that you can use to modify block logic. Okay, but what if you want to make a rotated block that you mimic, for example, if the block is minecraft:oak_stairs . Parameter attrs will allow you to send desired block state values. So, for example, if you want stairs facing east, you can just send {block=\"minecraft:oak_stairs\", attrs={facing=\"east}} . All block state values can be changed via attrs attribute, so feel free to use it from time to time. ItemStack \u00b6 ItemStack is representing pure minecraft stack. So item identification with count. It can be just pure string that represents item id, in this case count will be set 1. Or it can be a table {item = \"minecraft:stick\", count = 2} , in table count field is also optional and will be 1 by default RML \u00b6 RML is an acronym for Render Markup Language and is just a string with a list of specific instructions. Instructions should be separated via ; There are several instructions available right now: - t(x, y, z) : shifts all render to assigned coordinates. Take note, that if you rotate the render, coordinates will shift places. - r(axis, angle, x, y, z) : basically a rotateAround function, when the axis can be x , y or z , the angle can be any value in degrees, and x , y and z are coordinate of rotation center. So if you want to rotate the block around the center, you probably need to do something like: r(y, 90, 0.5, 1, 0.5) - s(x, y, z) : scales render. So, for example, if you want to rotate the render around the x axis and then scale it, you should pass r(y, 90, 0.5, 1, 0.5);s(1, 2, 1) .","title":"Types and definitions"},{"location":"API/introduction/#types-and-definitions","text":"This section of documentation will describe everything about APIs, that can be provided by different peripherals and general information how to read function tables. Take a note, that some peripherals (actually, a lot of them) will have extra functions besides supported APIs.","title":"Types and definitions"},{"location":"API/introduction/#parameters-description","text":"Functions defined like call_name(required_arg_1: arg_type_1, required_arg_2: arg_type_2, optional_arg: arg_type_3) . Some types will have additional limitations, like \"only positive numbers\", or \"only numbers in specific range\". In case when limitations are not met, function will throw exception.","title":"Parameters description"},{"location":"API/introduction/#new-data-types","text":"Mostly this sections contains enums, that are need to be passed as strings. Enums are case-insensetive, so you can pass them as you want. Name Lua type Limitations interactionMode string Enum with values: any, block, entity direction string Enum with values: up, down Result boolean, string? - Result[T] T?, string? -","title":"New data types"},{"location":"API/introduction/#interaction-mode","text":"All functions, that accept interactionMode as arguments, work with objects in line of sight. They will take as target the first object, that they found. You can force this functions to work only with blocks, or only with entities. Info You can get available interactionMode for specific APIs on peripheral documentation page. All available values is both , entity and block Warning Pretty important to note that a lot of entity interaction will be limited to specific entities. For example, Husbandry Automata Core allows to works only with animals. Always checks peripheral documentation page to understand its limitation with entities.","title":"Interaction mode"},{"location":"API/introduction/#direction","text":"All functions, that accept direction as arguments, work with objects in line of sight. You can use this argument to change line of sight and fake peripheral player will begin to start to look down (or up).","title":"Direction"},{"location":"API/introduction/#result","text":"Result are always representing result of called operation. First argument will tell you is operation was successful and second one will tell you reason why operation is failed. Result can also be parametrized, for example as Result[number] , which means it will return operation result as first argument (or nil) and as second argument it will tell you reason why operation is failed.","title":"Result"},{"location":"API/introduction/#itemquery","text":"Warning Before 1.19.4, ItemQuery type did not exist, so instead of it you can use only the string version of this argument ItemQuery is a powerful argument, that is supposed to help you build filters for items, extracting them in a more precise way, than just item ID. You can pass to an argument, that has type ItemQuery a string, and it will become just a regular item ID filter. But you can also pass a table { nbt = \"<item nbt hash>\" , tag = \"minecraft:lapis_ores\" , displayName = \"Deepslate Lapis Lazuli Ore\" , name = \"minecraft:deepslate_lapis_ore\" } A table can have zero or more keys and all of them will be required from the item at once. So, for example, if you want to search for a written book with the name \"Small and Big Owls\", you can pass next itemQuery { name = \"minecraft:written_book\" , displayName = \"Small and Big Owls\" }","title":"ItemQuery"},{"location":"API/introduction/#blockpos","text":"BlockPos is just generic table with three requied fields - x, y and z. So, something of this will be enough: { x = 5 , y = 7 , z = 8 } Warning In most cases block pos is expected to be relative to the target peripheral like in scan API","title":"BlockPos"},{"location":"API/introduction/#blockstate","text":"BlockState is a type that is used to build block states that should be mimicked. It is a very complex and context-dependent type, so if you experiment with it, you should be prepared to face a lot of Lua exceptions. Let's start with the basics. If you want to just mimic block, you can use {block = \"minecraft:oak_log\"} to mimic block by ID. There are a number of extra attributes that you can use to modify block logic. Okay, but what if you want to make a rotated block that you mimic, for example, if the block is minecraft:oak_stairs . Parameter attrs will allow you to send desired block state values. So, for example, if you want stairs facing east, you can just send {block=\"minecraft:oak_stairs\", attrs={facing=\"east}} . All block state values can be changed via attrs attribute, so feel free to use it from time to time.","title":"BlockState"},{"location":"API/introduction/#itemstack","text":"ItemStack is representing pure minecraft stack. So item identification with count. It can be just pure string that represents item id, in this case count will be set 1. Or it can be a table {item = \"minecraft:stick\", count = 2} , in table count field is also optional and will be 1 by default","title":"ItemStack"},{"location":"API/introduction/#rml","text":"RML is an acronym for Render Markup Language and is just a string with a list of specific instructions. Instructions should be separated via ; There are several instructions available right now: - t(x, y, z) : shifts all render to assigned coordinates. Take note, that if you rotate the render, coordinates will shift places. - r(axis, angle, x, y, z) : basically a rotateAround function, when the axis can be x , y or z , the angle can be any value in degrees, and x , y and z are coordinate of rotation center. So if you want to rotate the block around the center, you probably need to do something like: r(y, 90, 0.5, 1, 0.5) - s(x, y, z) : scales render. So, for example, if you want to rotate the render around the x axis and then scale it, you should pass r(y, 90, 0.5, 1, 0.5);s(1, 2, 1) .","title":"RML"},{"location":"API/item_storage/","text":"Item Storage API \u00b6 Generic storage API are answer for fabric transfer API for items. This API are basically copy of fluid_storage API. Why just don't reuse normal inventory API? Main problem here is that fabric transfer API don't allow to operate any slots , just pushing and pulling specific items. So, there is no possible to normally simulite inventory API with a large amount of dirty hacks and pain Also, this API is quite useful for any storage, that doesn't really have slots or slots different from minecraft ones, like Drawers, AE2, Refined Storage, etc. Peripheral methods \u00b6 Function Returns Description items(detailed?: boolean) table Returns a list with a detailed description for each time by default. You can pass false as the first argument to reduce information for better performance. pushItem(to: string, itemQuery?: ItemQuery , limit?: number number Tries to push items to target storage. Items, that will be pushed can be limited via itemQuery parameter and limited via limit parameter pullItem(from: string, itemQuery?: ItemQuery , limit?: number) number Tries to pull items from target storage. Items, that will be pulled can be limited via itemQuery parameter and limited via limit parameter","title":"Item Storage API"},{"location":"API/item_storage/#item-storage-api","text":"Generic storage API are answer for fabric transfer API for items. This API are basically copy of fluid_storage API. Why just don't reuse normal inventory API? Main problem here is that fabric transfer API don't allow to operate any slots , just pushing and pulling specific items. So, there is no possible to normally simulite inventory API with a large amount of dirty hacks and pain Also, this API is quite useful for any storage, that doesn't really have slots or slots different from minecraft ones, like Drawers, AE2, Refined Storage, etc.","title":"Item Storage API"},{"location":"API/item_storage/#peripheral-methods","text":"Function Returns Description items(detailed?: boolean) table Returns a list with a detailed description for each time by default. You can pass false as the first argument to reduce information for better performance. pushItem(to: string, itemQuery?: ItemQuery , limit?: number number Tries to push items to target storage. Items, that will be pushed can be limited via itemQuery parameter and limited via limit parameter pullItem(from: string, itemQuery?: ItemQuery , limit?: number) number Tries to pull items from target storage. Items, that will be pulled can be limited via itemQuery parameter and limited via limit parameter","title":"Peripheral methods"},{"location":"API/look/","text":"Look API \u00b6 Look API are mostly just improved inspect from ComputerCraft Turtle API. It is not pretty useful by itself, but it helps to understand who will be targeted of another APIs, like Interaction API or Capture API . Function Returns Description look(mode: InteractionMode , direction?: Direction ) table Returns detailed information about first target in line of sight. Look output examples Entity { \"type\" : \"Cow\" , \"name\" : \"Cow\" , \"category\" : \"CREATURE\" , \"id\" : 1269 , \"tags\" : {}, \"uuid\" : \"0737fd25-a1b6-4a1a-9cdd-3081e0155bb6\" } Block","title":"Look API"},{"location":"API/look/#look-api","text":"Look API are mostly just improved inspect from ComputerCraft Turtle API. It is not pretty useful by itself, but it helps to understand who will be targeted of another APIs, like Interaction API or Capture API . Function Returns Description look(mode: InteractionMode , direction?: Direction ) table Returns detailed information about first target in line of sight. Look output examples Entity { \"type\" : \"Cow\" , \"name\" : \"Cow\" , \"category\" : \"CREATURE\" , \"id\" : 1269 , \"tags\" : {}, \"uuid\" : \"0737fd25-a1b6-4a1a-9cdd-3081e0155bb6\" } Block","title":"Look API"},{"location":"API/operation/","text":"Operation API \u00b6 Operation API mostly responsible for those peripheral methods, that are somehow influence surrounding worlds. Most of these operations will have cooldowns - so you can't call them without delay. Also, some operation with long cooldowns we have it at each turtle start or upgrade equipment, so take this in account. You can configure cooldowns in the configuration file. Also, threshold for initial cooldown also can be configured via initialCooldownSensetiveLevel or even disabled with isInitialCooldownEnabled settings key. Function Returns Description getCooldown(operationName: string) number Returns times in milliseconds of left cooldown getOperations() table (list of strings) Returns all available operations","title":"Operation API"},{"location":"API/operation/#operation-api","text":"Operation API mostly responsible for those peripheral methods, that are somehow influence surrounding worlds. Most of these operations will have cooldowns - so you can't call them without delay. Also, some operation with long cooldowns we have it at each turtle start or upgrade equipment, so take this in account. You can configure cooldowns in the configuration file. Also, threshold for initial cooldown also can be configured via initialCooldownSensetiveLevel or even disabled with isInitialCooldownEnabled settings key. Function Returns Description getCooldown(operationName: string) number Returns times in milliseconds of left cooldown getOperations() table (list of strings) Returns all available operations","title":"Operation API"},{"location":"API/scan/","text":"Scan API \u00b6 Picture Scan API is an interesting one. It allows use to analyze environment around turtle in specific radius . However, result always will be orientation-related, direction in which turtle facing will be counted as X axis and direction at right of turtle will be counted as Z axis. This behavior will match Minecraft world axes when turtle facing east. Info Most of peripherals, that implements this API will provide only limited subset of scan methods. You can figure out which scan mods are allowed to use via documentation pages or scanMethods field from peripheral configuration. Warning radius should be positive integer Function Returns Description scan(\"item\", radius?: number) table 1 Scan surrounded area for items. scan(\"block\", radius?: number) table 2 Scan surrounded area for blocks. scan(\"entity\", radius?: number) table 3 Scan surrounded area for entities. Entities will be prefiltered by specific peripheral conditions scan(\"player\", radius?: number) table 4 Scan surrounded area for players. scan(\"xp\", radius?: number) table Scan surrounded area for xp orbs. Item scan output example [ { \"tags\" : {}, \"maxCount\" : 64 , \"displayName\" : \"Rail\" , \"y\" : 0 , \"x\" : -2 , \"count\" : 1 , \"z\" : 0 , \"rawName\" : \"block.minecraft.rail\" , \"name\" : \"minecraft:rail\" , \"itemGroups\" : {} }, { \"tags\" : {}, \"maxCount\" : 16 , \"displayName\" : \"Bucket\" , \"y\" : 0 , \"x\" : -1 , \"count\" : 1 , \"z\" : 0 , \"rawName\" : \"item.minecraft.bucket\" , \"name\" : \"minecraft:bucket\" , \"itemGroups\" : {} } ] \u21a9 Block scan output example [ { \"y\" : -1 , \"x\" : -1 , \"name\" : \"minecraft:grass_block\" , \"z\" : 1 , \"tags\" : [ \"...\" ], \"displayName\" : \"Grass Block\" }, { \"y\" : -1 , \"x\" : 0 , \"name\" : \"minecraft:grass_block\" , \"z\" : 1 , \"tags\" : [ \"...\" ], \"displayName\" : \"Grass Block\" }, { \"y\" : 0 , \"x\" : -1 , \"name\" : \"minecraft:grass\" , \"z\" : 1 , \"tags\" : [ \"minecraft:sword_efficient\" , \"minecraft:replaceable_by_trees\" , \"minecraft:enchantment_power_transmitter\" , \"minecraft:mineable/axe\" , \"minecraft:replaceable\" , \"techreborn:mineable/omni_tool\" ], \"displayName\" : \"Grass\" }, { \"y\" : -1 , \"x\" : -1 , \"name\" : \"minecraft:grass_block\" , \"z\" : 0 , \"tags\" : [ \"...\" ], \"displayName\" : \"Grass Block\" }, { \"y\" : -1 , \"x\" : 0 , \"name\" : \"minecraft:grass_block\" , \"z\" : 0 , \"tags\" : [ \"...\" ], \"displayName\" : \"Grass Block\" }, { \"y\" : 0 , \"x\" : 0 , \"name\" : \"peripheralworks:universal_scanner\" , \"z\" : 0 , \"tags\" : {}, \"displayName\" : \"Universal scanner\" }, { \"y\" : -1 , \"x\" : -1 , \"name\" : \"minecraft:grass_block\" , \"z\" : -1 , \"tags\" : [ \"...\" ], \"displayName\" : \"Grass Block\" }, { \"y\" : -1 , \"x\" : 0 , \"name\" : \"minecraft:dirt\" , \"z\" : -1 , \"tags\" : [ \"...\" ], \"displayName\" : \"Dirt\" }, { \"y\" : -1 , \"x\" : 1 , \"name\" : \"minecraft:grass_block\" , \"z\" : -1 , \"tags\" : [ \"...\" ], \"displayName\" : \"Grass Block\" }, { \"y\" : 0 , \"x\" : -1 , \"name\" : \"minecraft:grass\" , \"z\" : -1 , \"tags\" : [ \"minecraft:sword_efficient\" , \"minecraft:replaceable_by_trees\" , \"minecraft:enchantment_power_transmitter\" , \"minecraft:mineable/axe\" , \"minecraft:replaceable\" , \"techreborn:mineable/omni_tool\" ], \"displayName\" : \"Grass\" }, { \"y\" : 0 , \"x\" : 0 , \"name\" : \"computercraft:computer_advanced\" , \"z\" : -1 , \"tags\" : [ \"techreborn:mineable/omni_tool\" , \"minecraft:mineable/pickaxe\" , \"techreborn:mineable/drill\" , \"computercraft:computer\" ], \"displayName\" : \"Advanced Computer\" } ] \u21a9 Entity scan output example [ { \"type\" : \"Salmon\" , \"tags\" : {}, \"displayName\" : \"Salmon\" , \"y\" : -6 , \"x\" : -25 , \"health\" : 3 , \"category\" : \"WATER_AMBIENT\" , \"uuid\" : \"86cc9675-55fa-48cc-9fbc-0e4dba5d33bc\" , \"name\" : 15777 , \"z\" : 7 }, { \"type\" : \"Wandering Trader\" , \"tags\" : {}, \"displayName\" : \"Wandering Trader\" , \"y\" : -1 , \"x\" : 0 , \"health\" : 11 , \"category\" : \"CREATURE\" , \"uuid\" : \"c3df37a7-4e13-4154-b3cf-ac1491f39a64\" , \"name\" : 6979 , \"z\" : 2 }, { \"type\" : \"Trader Llama\" , \"tags\" : {}, \"displayName\" : \"Trader Llama\" , \"y\" : 1 , \"x\" : 0 , \"health\" : 28 , \"category\" : \"CREATURE\" , \"uuid\" : \"17bcda28-fdb8-4f60-b8a0-c28ba9693f9a\" , \"name\" : 6980 , \"z\" : 0 }, { \"type\" : \"Trader Llama\" , \"tags\" : {}, \"displayName\" : \"Trader Llama\" , \"y\" : 0 , \"x\" : -1 , \"health\" : 25 , \"category\" : \"CREATURE\" , \"uuid\" : \"78e51c88-ddbd-4442-b228-f2aaa59a5aa2\" , \"name\" : 6981 , \"z\" : 0 } ] \u21a9 Player scan output example [ { \"category\" : \"MISC\" , \"type\" : \"Player\" , \"foodLevel\" : 20 , \"saturationLevel\" : 5 , \"xRot\" : 35.249980926514 , \"yRot\" : 161.84989929199 , \"y\" : 0 , \"displayName\" : \"SirEdvin\" , \"experienceLevel\" : 0 , \"isCreative\" : true , \"health\" : 20 , \"z\" : -1 , \"x\" : 2 , \"name\" : 181 , \"tags\" : {}, \"uuid\" : \"<some_uuid>\" } ] \u21a9","title":"Scan API"},{"location":"API/scan/#scan-api","text":"Picture Scan API is an interesting one. It allows use to analyze environment around turtle in specific radius . However, result always will be orientation-related, direction in which turtle facing will be counted as X axis and direction at right of turtle will be counted as Z axis. This behavior will match Minecraft world axes when turtle facing east. Info Most of peripherals, that implements this API will provide only limited subset of scan methods. You can figure out which scan mods are allowed to use via documentation pages or scanMethods field from peripheral configuration. Warning radius should be positive integer Function Returns Description scan(\"item\", radius?: number) table 1 Scan surrounded area for items. scan(\"block\", radius?: number) table 2 Scan surrounded area for blocks. scan(\"entity\", radius?: number) table 3 Scan surrounded area for entities. Entities will be prefiltered by specific peripheral conditions scan(\"player\", radius?: number) table 4 Scan surrounded area for players. scan(\"xp\", radius?: number) table Scan surrounded area for xp orbs. Item scan output example [ { \"tags\" : {}, \"maxCount\" : 64 , \"displayName\" : \"Rail\" , \"y\" : 0 , \"x\" : -2 , \"count\" : 1 , \"z\" : 0 , \"rawName\" : \"block.minecraft.rail\" , \"name\" : \"minecraft:rail\" , \"itemGroups\" : {} }, { \"tags\" : {}, \"maxCount\" : 16 , \"displayName\" : \"Bucket\" , \"y\" : 0 , \"x\" : -1 , \"count\" : 1 , \"z\" : 0 , \"rawName\" : \"item.minecraft.bucket\" , \"name\" : \"minecraft:bucket\" , \"itemGroups\" : {} } ] \u21a9 Block scan output example [ { \"y\" : -1 , \"x\" : -1 , \"name\" : \"minecraft:grass_block\" , \"z\" : 1 , \"tags\" : [ \"...\" ], \"displayName\" : \"Grass Block\" }, { \"y\" : -1 , \"x\" : 0 , \"name\" : \"minecraft:grass_block\" , \"z\" : 1 , \"tags\" : [ \"...\" ], \"displayName\" : \"Grass Block\" }, { \"y\" : 0 , \"x\" : -1 , \"name\" : \"minecraft:grass\" , \"z\" : 1 , \"tags\" : [ \"minecraft:sword_efficient\" , \"minecraft:replaceable_by_trees\" , \"minecraft:enchantment_power_transmitter\" , \"minecraft:mineable/axe\" , \"minecraft:replaceable\" , \"techreborn:mineable/omni_tool\" ], \"displayName\" : \"Grass\" }, { \"y\" : -1 , \"x\" : -1 , \"name\" : \"minecraft:grass_block\" , \"z\" : 0 , \"tags\" : [ \"...\" ], \"displayName\" : \"Grass Block\" }, { \"y\" : -1 , \"x\" : 0 , \"name\" : \"minecraft:grass_block\" , \"z\" : 0 , \"tags\" : [ \"...\" ], \"displayName\" : \"Grass Block\" }, { \"y\" : 0 , \"x\" : 0 , \"name\" : \"peripheralworks:universal_scanner\" , \"z\" : 0 , \"tags\" : {}, \"displayName\" : \"Universal scanner\" }, { \"y\" : -1 , \"x\" : -1 , \"name\" : \"minecraft:grass_block\" , \"z\" : -1 , \"tags\" : [ \"...\" ], \"displayName\" : \"Grass Block\" }, { \"y\" : -1 , \"x\" : 0 , \"name\" : \"minecraft:dirt\" , \"z\" : -1 , \"tags\" : [ \"...\" ], \"displayName\" : \"Dirt\" }, { \"y\" : -1 , \"x\" : 1 , \"name\" : \"minecraft:grass_block\" , \"z\" : -1 , \"tags\" : [ \"...\" ], \"displayName\" : \"Grass Block\" }, { \"y\" : 0 , \"x\" : -1 , \"name\" : \"minecraft:grass\" , \"z\" : -1 , \"tags\" : [ \"minecraft:sword_efficient\" , \"minecraft:replaceable_by_trees\" , \"minecraft:enchantment_power_transmitter\" , \"minecraft:mineable/axe\" , \"minecraft:replaceable\" , \"techreborn:mineable/omni_tool\" ], \"displayName\" : \"Grass\" }, { \"y\" : 0 , \"x\" : 0 , \"name\" : \"computercraft:computer_advanced\" , \"z\" : -1 , \"tags\" : [ \"techreborn:mineable/omni_tool\" , \"minecraft:mineable/pickaxe\" , \"techreborn:mineable/drill\" , \"computercraft:computer\" ], \"displayName\" : \"Advanced Computer\" } ] \u21a9 Entity scan output example [ { \"type\" : \"Salmon\" , \"tags\" : {}, \"displayName\" : \"Salmon\" , \"y\" : -6 , \"x\" : -25 , \"health\" : 3 , \"category\" : \"WATER_AMBIENT\" , \"uuid\" : \"86cc9675-55fa-48cc-9fbc-0e4dba5d33bc\" , \"name\" : 15777 , \"z\" : 7 }, { \"type\" : \"Wandering Trader\" , \"tags\" : {}, \"displayName\" : \"Wandering Trader\" , \"y\" : -1 , \"x\" : 0 , \"health\" : 11 , \"category\" : \"CREATURE\" , \"uuid\" : \"c3df37a7-4e13-4154-b3cf-ac1491f39a64\" , \"name\" : 6979 , \"z\" : 2 }, { \"type\" : \"Trader Llama\" , \"tags\" : {}, \"displayName\" : \"Trader Llama\" , \"y\" : 1 , \"x\" : 0 , \"health\" : 28 , \"category\" : \"CREATURE\" , \"uuid\" : \"17bcda28-fdb8-4f60-b8a0-c28ba9693f9a\" , \"name\" : 6980 , \"z\" : 0 }, { \"type\" : \"Trader Llama\" , \"tags\" : {}, \"displayName\" : \"Trader Llama\" , \"y\" : 0 , \"x\" : -1 , \"health\" : 25 , \"category\" : \"CREATURE\" , \"uuid\" : \"78e51c88-ddbd-4442-b228-f2aaa59a5aa2\" , \"name\" : 6981 , \"z\" : 0 } ] \u21a9 Player scan output example [ { \"category\" : \"MISC\" , \"type\" : \"Player\" , \"foodLevel\" : 20 , \"saturationLevel\" : 5 , \"xRot\" : 35.249980926514 , \"yRot\" : 161.84989929199 , \"y\" : 0 , \"displayName\" : \"SirEdvin\" , \"experienceLevel\" : 0 , \"isCreative\" : true , \"health\" : 20 , \"z\" : -1 , \"x\" : 2 , \"name\" : 181 , \"tags\" : {}, \"uuid\" : \"<some_uuid>\" } ] \u21a9","title":"Scan API"},{"location":"API/suck/","text":"Suck API \u00b6 Suck API exists for sucking surrounding items to peripheral owner inventory Function Returns Description suck(limit?: number, query?: ItemQuery ) Result Tries to suck items around interaction radius. If query is provided, sucked item will be limited by it","title":"Suck API"},{"location":"API/suck/#suck-api","text":"Suck API exists for sucking surrounding items to peripheral owner inventory Function Returns Description suck(limit?: number, query?: ItemQuery ) Result Tries to suck items around interaction radius. If query is provided, sucked item will be limited by it","title":"Suck API"},{"location":"API/warp/","text":"Warp API \u00b6 Warp API essentially comes from harvesting power of The End itself. It allows you to jump to previously stored points instantly and with reduced cost. Warning Before 1.0.0, due to ComputerCraft limitations all stored points data will be lost if you unequip turtle upgrade. Warning Points are limited per upgrade. It controlled by endAutomataCoreWarpPointLimit Minecraft settings and by default it is 64 Function Returns Description savePoint(name: string) Result Saves current turtle location into data for future use deletePoint(name: string) Result Delete points if it exists warpToPoint(name: string) Result Teleport turtle to stored point if turtle has enough fuel points() table Returns list of point names estimateWarpCost(name: string) number Returns cost of warp in fuel distanceToPoint(name: string number Return manhattan distance to point","title":"Warp API"},{"location":"API/warp/#warp-api","text":"Warp API essentially comes from harvesting power of The End itself. It allows you to jump to previously stored points instantly and with reduced cost. Warning Before 1.0.0, due to ComputerCraft limitations all stored points data will be lost if you unequip turtle upgrade. Warning Points are limited per upgrade. It controlled by endAutomataCoreWarpPointLimit Minecraft settings and by default it is 64 Function Returns Description savePoint(name: string) Result Saves current turtle location into data for future use deletePoint(name: string) Result Delete points if it exists warpToPoint(name: string) Result Teleport turtle to stored point if turtle has enough fuel points() table Returns list of point names estimateWarpCost(name: string) number Returns cost of warp in fuel distanceToPoint(name: string number Return manhattan distance to point","title":"Warp API"},{"location":"CloudSolutions/","text":"SirEdvin's Cloud Solutions \u00b6 Tired of too bare metal world of CC:T? What your own database to be reliable no matter what 2 ? What some block draw charts for you 1 ? Then get ready for SirEdvin's Cloud solutions, mod that designed to provide you with all this crap: Open yourself to a bunch of cross-dimensional cloud databases: KV and Timeseries 3 Server owners can allow uses to build their dashboards on top of cloud databases, that would be accessable from real world 3 Ask server owners to configure StatsD bridge and send metrics from your computers to real worlds And much more to come, if you have ideas, please, open an issue This feature is in development now, sorry for this :) \u21a9 Well, every peace of data still hosted on same machine as minecraft server, so please, take this to account \u21a9 This feature now in development \u21a9 \u21a9","title":"SirEdvin's Cloud Solutions"},{"location":"CloudSolutions/#siredvins-cloud-solutions","text":"Tired of too bare metal world of CC:T? What your own database to be reliable no matter what 2 ? What some block draw charts for you 1 ? Then get ready for SirEdvin's Cloud solutions, mod that designed to provide you with all this crap: Open yourself to a bunch of cross-dimensional cloud databases: KV and Timeseries 3 Server owners can allow uses to build their dashboards on top of cloud databases, that would be accessable from real world 3 Ask server owners to configure StatsD bridge and send metrics from your computers to real worlds And much more to come, if you have ideas, please, open an issue This feature is in development now, sorry for this :) \u21a9 Well, every peace of data still hosted on same machine as minecraft server, so please, take this to account \u21a9 This feature now in development \u21a9 \u21a9","title":"SirEdvin's Cloud Solutions"},{"location":"CloudSolutions/kv_storage/","text":"KV Storage \u00b6 KV Storage Name: kv_storage Supported versions Forge : 1.20.x Fabric : 1.20.x KV Storage is a simple implementation of a key-value database for your CC:T programs. It is owner-based, bound to the player who placed the block, so each KV storage that player placed is attached to the same database. Internally, KV storage by default uses sqlite database, attached to the world folder. If the server owner wants to disable only the KV storage database, they can change kvStorageMode to DISABLED . Also, each player has a limited number of keys stored inside the database, which is controlled by kvStorageKeyLimit and equal to 1000 by default. Supported APIs \u00b6 Configuration API : provides keyLimit which shows the max number of keys player can have and valueLimit which shows max size of value. Functions \u00b6 put \u00b6 put(key: string, value: string, expire?: number) Put new key into KV storage. expire is optional argument that can be provided to make key automatically expire after some period of time. expire should be utc timestamp of real time, you can get it from os.epoch(\"utc\") function. put ( \"key1\" , \"v1\" ) -- saving key1 into database put ( \"key2\" , \"v1\" , os . epoch ( \"utc\" ) + 20 ) -- saving key2 into database, key2 will be expired after 20 seconds get \u00b6 get(key: string): string or null Helps you to retrive value from key, if key is present in database and not expired. delete \u00b6 delete(key: string) Removes key from database if it existed. list \u00b6 list(): table Returns a list of all available keys for owner. get_ext \u00b6 get_ex(key: String): number or nil Returns point in time when this key would expire. Nil if key is not present or expire is nil. put_ex \u00b6 put_ex(key: String, expire?: number or nil) Put new expire mark for key. You also can pass nil to remove expire from key.","title":"KV Storage"},{"location":"CloudSolutions/kv_storage/#kv-storage","text":"KV Storage Name: kv_storage Supported versions Forge : 1.20.x Fabric : 1.20.x KV Storage is a simple implementation of a key-value database for your CC:T programs. It is owner-based, bound to the player who placed the block, so each KV storage that player placed is attached to the same database. Internally, KV storage by default uses sqlite database, attached to the world folder. If the server owner wants to disable only the KV storage database, they can change kvStorageMode to DISABLED . Also, each player has a limited number of keys stored inside the database, which is controlled by kvStorageKeyLimit and equal to 1000 by default.","title":"KV Storage"},{"location":"CloudSolutions/kv_storage/#supported-apis","text":"Configuration API : provides keyLimit which shows the max number of keys player can have and valueLimit which shows max size of value.","title":"Supported APIs"},{"location":"CloudSolutions/kv_storage/#functions","text":"","title":"Functions"},{"location":"CloudSolutions/kv_storage/#put","text":"put(key: string, value: string, expire?: number) Put new key into KV storage. expire is optional argument that can be provided to make key automatically expire after some period of time. expire should be utc timestamp of real time, you can get it from os.epoch(\"utc\") function. put ( \"key1\" , \"v1\" ) -- saving key1 into database put ( \"key2\" , \"v1\" , os . epoch ( \"utc\" ) + 20 ) -- saving key2 into database, key2 will be expired after 20 seconds","title":"put"},{"location":"CloudSolutions/kv_storage/#get","text":"get(key: string): string or null Helps you to retrive value from key, if key is present in database and not expired.","title":"get"},{"location":"CloudSolutions/kv_storage/#delete","text":"delete(key: string) Removes key from database if it existed.","title":"delete"},{"location":"CloudSolutions/kv_storage/#list","text":"list(): table Returns a list of all available keys for owner.","title":"list"},{"location":"CloudSolutions/kv_storage/#get_ext","text":"get_ex(key: String): number or nil Returns point in time when this key would expire. Nil if key is not present or expire is nil.","title":"get_ext"},{"location":"CloudSolutions/kv_storage/#put_ex","text":"put_ex(key: String, expire?: number or nil) Put new expire mark for key. You also can pass nil to remove expire from key.","title":"put_ex"},{"location":"CloudSolutions/statsd_bridge/","text":"StatsD Bridge \u00b6 StatsD Bridge Name: statsd_bridge Supported versions Forge : 1.20.x Fabric : 1.20.x StatsD Bridge exists to allow players to send statsd metrics to a preconfigured statsd server. The settings for this peripheral are split into two files. The common configuration field enableStatsDBridge corresponds to the enabled peripheral block, while the server configuration section statsd is responsible for statsd bridge configuration. The server owner should configure statsdHostname and statsdPort and point them to some statsd receiver and set enableStatsDConnection to true. With these settings, at the start of the server, a new non-blocking statsd client will be started. The server owner can also define a statsdPrefix which will be added to the name of any metrics at start. Any metric that a player will send with this integration will always start with a preconfigured statsdPrefix and will also contain the owner's name. So, it would be <prefix><owner_name>.aspect . The owner is a player who placed the block. Owner is also used for rate limiting messages to the statsd client; the max amount of messages per minute is controlled by statsdPlayerRateLimit . This is also a global rate limit per minute, which is controlled by statsdGlobalRateLimit . Supported APIs \u00b6 Configuration API : provides playerRateLimit and globalRateLimit which tells you how often you are allowed to send values per minute. Functions \u00b6 count \u00b6 count(aspect: String, delta: number) Will send counter to statsd server. Delta can be any real number. delta \u00b6 delta(aspect: String, delta: number) Function send gauge delta to statsd server. Delta can be any real number. gauge \u00b6 gauge(aspect: String, value: number) Function sets gauge value to stastd server. It is takes to account that you can't set negative value for gauge as one message, so it will actually send two messages, one with setting gauge to zero, and one with negative delta. set \u00b6 set(aspect: String, eventName: String) Functions that sets some aspect to same value. Should accept anything time \u00b6 time(aspect: String, timeInMs: number) Function that sends time measurement to statsd server. timeInMs supposed to be time in milliseconds. Please, take to account, that os.epoch() and os.date() by default returns Minecraft time, so to measure execution time you should do something like this: local p = peripheral . find ( \"statsd_bridge\" ) local start_time = os . epoch ( \"utc\" ) some_function () p . time ( \"some_function\" , os . epoch ( \"utc\" ) - start_time )","title":"StatsD Bridge"},{"location":"CloudSolutions/statsd_bridge/#statsd-bridge","text":"StatsD Bridge Name: statsd_bridge Supported versions Forge : 1.20.x Fabric : 1.20.x StatsD Bridge exists to allow players to send statsd metrics to a preconfigured statsd server. The settings for this peripheral are split into two files. The common configuration field enableStatsDBridge corresponds to the enabled peripheral block, while the server configuration section statsd is responsible for statsd bridge configuration. The server owner should configure statsdHostname and statsdPort and point them to some statsd receiver and set enableStatsDConnection to true. With these settings, at the start of the server, a new non-blocking statsd client will be started. The server owner can also define a statsdPrefix which will be added to the name of any metrics at start. Any metric that a player will send with this integration will always start with a preconfigured statsdPrefix and will also contain the owner's name. So, it would be <prefix><owner_name>.aspect . The owner is a player who placed the block. Owner is also used for rate limiting messages to the statsd client; the max amount of messages per minute is controlled by statsdPlayerRateLimit . This is also a global rate limit per minute, which is controlled by statsdGlobalRateLimit .","title":"StatsD Bridge"},{"location":"CloudSolutions/statsd_bridge/#supported-apis","text":"Configuration API : provides playerRateLimit and globalRateLimit which tells you how often you are allowed to send values per minute.","title":"Supported APIs"},{"location":"CloudSolutions/statsd_bridge/#functions","text":"","title":"Functions"},{"location":"CloudSolutions/statsd_bridge/#count","text":"count(aspect: String, delta: number) Will send counter to statsd server. Delta can be any real number.","title":"count"},{"location":"CloudSolutions/statsd_bridge/#delta","text":"delta(aspect: String, delta: number) Function send gauge delta to statsd server. Delta can be any real number.","title":"delta"},{"location":"CloudSolutions/statsd_bridge/#gauge","text":"gauge(aspect: String, value: number) Function sets gauge value to stastd server. It is takes to account that you can't set negative value for gauge as one message, so it will actually send two messages, one with setting gauge to zero, and one with negative delta.","title":"gauge"},{"location":"CloudSolutions/statsd_bridge/#set","text":"set(aspect: String, eventName: String) Functions that sets some aspect to same value. Should accept anything","title":"set"},{"location":"CloudSolutions/statsd_bridge/#time","text":"time(aspect: String, timeInMs: number) Function that sends time measurement to statsd server. timeInMs supposed to be time in milliseconds. Please, take to account, that os.epoch() and os.date() by default returns Minecraft time, so to measure execution time you should do something like this: local p = peripheral . find ( \"statsd_bridge\" ) local start_time = os . epoch ( \"utc\" ) some_function () p . time ( \"some_function\" , os . epoch ( \"utc\" ) - start_time )","title":"time"},{"location":"Turtlematic/","text":"Home \u00b6 Turtlematic - is mod about making turtles so useful, so you will never need any other automation mod! Most of peripheral methods are collected into API methods. Every new automata core, that you will craft expand or evolve those abilities by methods and parameters will stay the same! Supported versions \u00b6 Forge : 1.20.x (features) Fabric : 1.18 (fixes), 1.19.2 (fixes), 1.20.x (features) Current features list \u00b6 With this mod turtles will be able to: World interaction \u00b6 Simulate player right and left click with items on blocks and mobs Gathering experience In-place smelting and stonecutting (with mod interactions) for blocks Pushing blocks and pulling them pack like pistons Capture and release blocks and mobs Searching for mobs or items around turtle Harvest crops without block breaking Trading with villagers and traders Extra crafting \u00b6 Enchanting items and extract enchantments to books Smelting items Smithing recipes Miscellaneous \u00b6 Teleporting to previously stored points in world Placing chat bubbles on top of themself Voiding item in inventory and more feature comes Getting started \u00b6 Soul vial recipe To start with the main part of this mod, you need to obtain a Soul vial and start gathering souls. To collect soul you just need to right click on soul sand with this vial, it consumes soul and transform soul sand into usual sand. You can track soul consumption progress by tooltip and image picture. After enough soul it will be transformed into \"Filled soul vial\" that can be used to craft your first automata ! Improving automata core \u00b6 Soul scrapper recipe Crafted automata core is just the first step. To improve it you need a tool, that will allow to you to collect souls and infuse your automata core with it. This tool is called Soul Scrapper . Terrifying scythe that are too evil to be used by human hand. Thankfully, you can use turtles for this dirty and evil job. Poor cow At automata page you can see cores, that can be created from base one.","title":"Home"},{"location":"Turtlematic/#home","text":"Turtlematic - is mod about making turtles so useful, so you will never need any other automation mod! Most of peripheral methods are collected into API methods. Every new automata core, that you will craft expand or evolve those abilities by methods and parameters will stay the same!","title":"Home"},{"location":"Turtlematic/#supported-versions","text":"Forge : 1.20.x (features) Fabric : 1.18 (fixes), 1.19.2 (fixes), 1.20.x (features)","title":"Supported versions"},{"location":"Turtlematic/#current-features-list","text":"With this mod turtles will be able to:","title":"Current features list"},{"location":"Turtlematic/#world-interaction","text":"Simulate player right and left click with items on blocks and mobs Gathering experience In-place smelting and stonecutting (with mod interactions) for blocks Pushing blocks and pulling them pack like pistons Capture and release blocks and mobs Searching for mobs or items around turtle Harvest crops without block breaking Trading with villagers and traders","title":"World interaction"},{"location":"Turtlematic/#extra-crafting","text":"Enchanting items and extract enchantments to books Smelting items Smithing recipes","title":"Extra crafting"},{"location":"Turtlematic/#miscellaneous","text":"Teleporting to previously stored points in world Placing chat bubbles on top of themself Voiding item in inventory and more feature comes","title":"Miscellaneous"},{"location":"Turtlematic/#getting-started","text":"Soul vial recipe To start with the main part of this mod, you need to obtain a Soul vial and start gathering souls. To collect soul you just need to right click on soul sand with this vial, it consumes soul and transform soul sand into usual sand. You can track soul consumption progress by tooltip and image picture. After enough soul it will be transformed into \"Filled soul vial\" that can be used to craft your first automata !","title":"Getting started"},{"location":"Turtlematic/#improving-automata-core","text":"Soul scrapper recipe Crafted automata core is just the first step. To improve it you need a tool, that will allow to you to collect souls and infuse your automata core with it. This tool is called Soul Scrapper . Terrifying scythe that are too evil to be used by human hand. Thankfully, you can use turtles for this dirty and evil job. Poor cow At automata page you can see cores, that can be created from base one.","title":"Improving automata core"},{"location":"Turtlematic/automata/automata/","text":"Automata \u00b6 Picture Your first automata core, that starts your journey into mystery turtlematic world. Evolving \u00b6 This automata core can be supplied with souls via soul scrapper to transform into: End automata Husbandry automata Supported APIs \u00b6 Configuration API Fuel API Operation API Look API Suck API Interaction API : only interaction with blocks are allowed Scan API : only interaction with items are allowed","title":"Automata"},{"location":"Turtlematic/automata/automata/#automata","text":"Picture Your first automata core, that starts your journey into mystery turtlematic world.","title":"Automata"},{"location":"Turtlematic/automata/automata/#evolving","text":"This automata core can be supplied with souls via soul scrapper to transform into: End automata Husbandry automata","title":"Evolving"},{"location":"Turtlematic/automata/automata/#supported-apis","text":"Configuration API Fuel API Operation API Look API Suck API Interaction API : only interaction with blocks are allowed Scan API : only interaction with items are allowed","title":"Supported APIs"},{"location":"Turtlematic/automata/brewing/","text":"Brewing automata \u00b6 Picture Automata that harness power of cleric villager, allows you to perform brew potions, throw it and curing villagers Obtaining \u00b6 Feed cleric villager to forged automata core with soul scrapper to obtain it. Supported APIs \u00b6 Configuration API Fuel API Operation API Look API Suck API Experience API Scan API : only for items and zombie villagers Interaction API : only for blocks and zombie villagers Extra methods \u00b6 1.19.4 1.18/1.19.2 Function Returns Description brew() Result Performs brew operations, applying item in selected slot as brewing component to all potions in inventory. throwPotion(power: number, angle: number) Result Throws potion in selected slot with provided power and angle (in degrees) Function Returns Description brew() Result Performs brew operations, applying item in selected slot as brewing component to all potions in inventory. throwPotion(power?: number, uncertainty?: number) Result Throws potion in selected slot with provided power (controls max distance) and uncertainty (controls deviation) Notes \u00b6 XP notes Brewing operations often provides some XP that will be stored in turtle Extra information about zombie villagers To help you understand power of your potions, you will receive extra information about entities with Look API and Scan API { \"type\" : \"Cow\" , \"name\" : \"Cow\" , \"category\" : \"CREATURE\" , \"id\" : 1269 , \"tags\" : {}, \"uuid\" : \"0737fd25-a1b6-4a1a-9cdd-3081e0155bb6\" , \"effects\" : [ { \"amplifier\" : 0 , \"duration\" : 1474 , \"isAmbient\" : false , \"name\" : \"Regeneration\" , \"technicalName\" : \"minecraft:regeneration\" } ] } How do I supposed to get water bottles? You can use glass bottles on water sources","title":"Brewing automata"},{"location":"Turtlematic/automata/brewing/#brewing-automata","text":"Picture Automata that harness power of cleric villager, allows you to perform brew potions, throw it and curing villagers","title":"Brewing automata"},{"location":"Turtlematic/automata/brewing/#obtaining","text":"Feed cleric villager to forged automata core with soul scrapper to obtain it.","title":"Obtaining"},{"location":"Turtlematic/automata/brewing/#supported-apis","text":"Configuration API Fuel API Operation API Look API Suck API Experience API Scan API : only for items and zombie villagers Interaction API : only for blocks and zombie villagers","title":"Supported APIs"},{"location":"Turtlematic/automata/brewing/#extra-methods","text":"1.19.4 1.18/1.19.2 Function Returns Description brew() Result Performs brew operations, applying item in selected slot as brewing component to all potions in inventory. throwPotion(power: number, angle: number) Result Throws potion in selected slot with provided power and angle (in degrees) Function Returns Description brew() Result Performs brew operations, applying item in selected slot as brewing component to all potions in inventory. throwPotion(power?: number, uncertainty?: number) Result Throws potion in selected slot with provided power (controls max distance) and uncertainty (controls deviation)","title":"Extra methods"},{"location":"Turtlematic/automata/brewing/#notes","text":"XP notes Brewing operations often provides some XP that will be stored in turtle Extra information about zombie villagers To help you understand power of your potions, you will receive extra information about entities with Look API and Scan API { \"type\" : \"Cow\" , \"name\" : \"Cow\" , \"category\" : \"CREATURE\" , \"id\" : 1269 , \"tags\" : {}, \"uuid\" : \"0737fd25-a1b6-4a1a-9cdd-3081e0155bb6\" , \"effects\" : [ { \"amplifier\" : 0 , \"duration\" : 1474 , \"isAmbient\" : false , \"name\" : \"Regeneration\" , \"technicalName\" : \"minecraft:regeneration\" } ] } How do I supposed to get water bottles? You can use glass bottles on water sources","title":"Notes"},{"location":"Turtlematic/automata/enchanting/","text":"Enchanting automata \u00b6 Picture Automata that harness power of librarian villager, allows you to works with enchantments. Obtaining \u00b6 Feed librarian villager to forged automata core with soul scrapper to obtain it. Supported APIs \u00b6 Configuration API Fuel API Operation API Suck API Experience API Extra methods \u00b6 Function Returns Description getEnchantmentPower() number Returns current enchantment power around turtle getPossibleEnchantments() table Returns list of possible enchantment with current enchantment power level for item in selected slot. It will always return 3 suggestions like default enchanting table. Also it always shows only ONE enchantment even if more will be applied refreshEnchantments() nil Refresh enchantments in list of possible enchantments. This is an only way to get different enchantments without performing enchantments enchant(selected: number) Result Tries to perform enchantment on item with selected enchantment from list of possible enchatments. Selected should be 1, 2 or 3. Consumes XP from XP storage as for usual enchantment extractEnchantment(target: number) Result Tries to extract enchantments from item in selected slot to item in target slot. An item in target slot should contain only 1 book. There is a small chance that one enchantment will be lost in the process Notes \u00b6 Enchantment power gathering To perform enchantment you need to make sure, that you have enough enchantment power. Any head or bookshelf around turtle (radius of influence is 2 blocks) will give 2 extra points of enchantment power. Take a note, that turtles in the same radius will give two extra enchantment power points per enchanting book in their inventory. What gives enchantment power By default: bookshelf, heads, candle and candle cake. You can control this via turtlematic:enchantment_power_provider tag","title":"Enchanting automata"},{"location":"Turtlematic/automata/enchanting/#enchanting-automata","text":"Picture Automata that harness power of librarian villager, allows you to works with enchantments.","title":"Enchanting automata"},{"location":"Turtlematic/automata/enchanting/#obtaining","text":"Feed librarian villager to forged automata core with soul scrapper to obtain it.","title":"Obtaining"},{"location":"Turtlematic/automata/enchanting/#supported-apis","text":"Configuration API Fuel API Operation API Suck API Experience API","title":"Supported APIs"},{"location":"Turtlematic/automata/enchanting/#extra-methods","text":"Function Returns Description getEnchantmentPower() number Returns current enchantment power around turtle getPossibleEnchantments() table Returns list of possible enchantment with current enchantment power level for item in selected slot. It will always return 3 suggestions like default enchanting table. Also it always shows only ONE enchantment even if more will be applied refreshEnchantments() nil Refresh enchantments in list of possible enchantments. This is an only way to get different enchantments without performing enchantments enchant(selected: number) Result Tries to perform enchantment on item with selected enchantment from list of possible enchatments. Selected should be 1, 2 or 3. Consumes XP from XP storage as for usual enchantment extractEnchantment(target: number) Result Tries to extract enchantments from item in selected slot to item in target slot. An item in target slot should contain only 1 book. There is a small chance that one enchantment will be lost in the process","title":"Extra methods"},{"location":"Turtlematic/automata/enchanting/#notes","text":"Enchantment power gathering To perform enchantment you need to make sure, that you have enough enchantment power. Any head or bookshelf around turtle (radius of influence is 2 blocks) will give 2 extra points of enchantment power. Take a note, that turtles in the same radius will give two extra enchantment power points per enchanting book in their inventory. What gives enchantment power By default: bookshelf, heads, candle and candle cake. You can control this via turtlematic:enchantment_power_provider tag","title":"Notes"},{"location":"Turtlematic/automata/end/","text":"End automata \u00b6 Picture Advanced automata that can harness power of the End. Obtaining \u00b6 Feed 3 enderman souls to automata core with soul scrapper to obtain it. Supported APIs \u00b6 Configuration API Fuel API Operation API Look API Suck API Interaction API : only interaction with blocks are allowed Scan API : only interaction with items are allowed Warp API Capture API : only interaction with blocks are allowed","title":"End automata"},{"location":"Turtlematic/automata/end/#end-automata","text":"Picture Advanced automata that can harness power of the End.","title":"End automata"},{"location":"Turtlematic/automata/end/#obtaining","text":"Feed 3 enderman souls to automata core with soul scrapper to obtain it.","title":"Obtaining"},{"location":"Turtlematic/automata/end/#supported-apis","text":"Configuration API Fuel API Operation API Look API Suck API Interaction API : only interaction with blocks are allowed Scan API : only interaction with items are allowed Warp API Capture API : only interaction with blocks are allowed","title":"Supported APIs"},{"location":"Turtlematic/automata/husbandry/","text":"Husbandry automata \u00b6 Picture Advanced automata that can harness power of the nature. This automata provider extra capabilities of take care about peaceful mobs and crops (nether wart and cocoa beans included!). Obtaining \u00b6 Feed 1 pig, 1 chiken, 1 sheep and 1 cow souls to automata core with soul scrapper to obtain it. Supported APIs \u00b6 Configuration API Fuel API Operation API Look API Suck API Interaction API : allows interaction with blocks and some entities Scan API : allows interaction with items and some entities Capture API : only interaction with some entities AI API : only interaction with some entities Extra methods \u00b6 Function Returns Description harvest(direction?: Direction Result Tries to harvest crop. Crop will not be broken, works like right click harvest Notes \u00b6 Which entity are usable for husbandry automata If at least one of criteria met: Entity is friendly Entity have \"creature\" category Entity have turtlematic:husbandry_extra_animal tag What is count as crops If at least one of criteria met: Block are extends CropBlock Block has age attribute and turtlematic:husbandry_extra_crops Extra information about animals Sometimes 1 this automata will show extra information about animals when you use Look or Scan APIs. For example, this is output for sheep { \"type\" : \"Sheep\" , \"name\" : \"Sheep\" , \"category\" : \"CREATURE\" , \"id\" : 1269 , \"tags\" : {}, \"uuid\" : \"0737fd25-a1b6-4a1a-9cdd-3081e0155bb6\" , //here goes extra fields \"aggresive\" : false , \"baby\" : false , \"inLove\" : false , \"aggresive\" : false , \"shearable\" : true } Extra information about blocks If block has age property, extra data about it will be provided when you use Look API . { \"age\" : 2 , \"maxAge\" : 2 , \"name\" : \"Cocoa\" , \"tags\" : [ \"minecraft:mineable/axe\" , \"turtlematic:husbandry_extra_crops\" ] } For beehive and bee nest there a lot of extra data will be provided when you use Look API . { \"honetLevel\" : 3 , \"name\" : \"Bee Nest\" , \"isFull\" : false , \"isSmoked\" : false , \"bees\" : [ { \"hasFlower\" : true , \"hasNectar\" : true , \"hasStung\" : false , \"health\" : 10 , \"id\" : \"minecraft:bee\" , \"name\" : \"Bee\" , \"minOccupationTicks\" : 2400 , \"ticksInHive\" : 283 } ] \"tags\" : [ \"minecraft:mineable/axe\" , \"minecraft:beehives\" ] } When entity class extends Animal. shearable available when entity class extends Animal and implements Shearable interface \u21a9","title":"Husbandry automata"},{"location":"Turtlematic/automata/husbandry/#husbandry-automata","text":"Picture Advanced automata that can harness power of the nature. This automata provider extra capabilities of take care about peaceful mobs and crops (nether wart and cocoa beans included!).","title":"Husbandry automata"},{"location":"Turtlematic/automata/husbandry/#obtaining","text":"Feed 1 pig, 1 chiken, 1 sheep and 1 cow souls to automata core with soul scrapper to obtain it.","title":"Obtaining"},{"location":"Turtlematic/automata/husbandry/#supported-apis","text":"Configuration API Fuel API Operation API Look API Suck API Interaction API : allows interaction with blocks and some entities Scan API : allows interaction with items and some entities Capture API : only interaction with some entities AI API : only interaction with some entities","title":"Supported APIs"},{"location":"Turtlematic/automata/husbandry/#extra-methods","text":"Function Returns Description harvest(direction?: Direction Result Tries to harvest crop. Crop will not be broken, works like right click harvest","title":"Extra methods"},{"location":"Turtlematic/automata/husbandry/#notes","text":"Which entity are usable for husbandry automata If at least one of criteria met: Entity is friendly Entity have \"creature\" category Entity have turtlematic:husbandry_extra_animal tag What is count as crops If at least one of criteria met: Block are extends CropBlock Block has age attribute and turtlematic:husbandry_extra_crops Extra information about animals Sometimes 1 this automata will show extra information about animals when you use Look or Scan APIs. For example, this is output for sheep { \"type\" : \"Sheep\" , \"name\" : \"Sheep\" , \"category\" : \"CREATURE\" , \"id\" : 1269 , \"tags\" : {}, \"uuid\" : \"0737fd25-a1b6-4a1a-9cdd-3081e0155bb6\" , //here goes extra fields \"aggresive\" : false , \"baby\" : false , \"inLove\" : false , \"aggresive\" : false , \"shearable\" : true } Extra information about blocks If block has age property, extra data about it will be provided when you use Look API . { \"age\" : 2 , \"maxAge\" : 2 , \"name\" : \"Cocoa\" , \"tags\" : [ \"minecraft:mineable/axe\" , \"turtlematic:husbandry_extra_crops\" ] } For beehive and bee nest there a lot of extra data will be provided when you use Look API . { \"honetLevel\" : 3 , \"name\" : \"Bee Nest\" , \"isFull\" : false , \"isSmoked\" : false , \"bees\" : [ { \"hasFlower\" : true , \"hasNectar\" : true , \"hasStung\" : false , \"health\" : 10 , \"id\" : \"minecraft:bee\" , \"name\" : \"Bee\" , \"minOccupationTicks\" : 2400 , \"ticksInHive\" : 283 } ] \"tags\" : [ \"minecraft:mineable/axe\" , \"minecraft:beehives\" ] } When entity class extends Animal. shearable available when entity class extends Animal and implements Shearable interface \u21a9","title":"Notes"},{"location":"Turtlematic/automata/mason/","text":"Mason automata \u00b6 Picture Automata that harness power of mason villager, allows you to modify appearance of different blocks in world and inventory. Mason automata also has mod support: Chipped Obtaining \u00b6 Feed mason villager to forged automata core with soul scrapper to obtain it. Supported APIs \u00b6 Configuration API Fuel API Operation API Look API Suck API Experience API Extra methods \u00b6 Function Returns Description getAlternatives(\"inventory\") table Returns list of possible alternatives for item in selected slot getAlternatives(\"block\", direction?: Direction ) table Returns list of possible alternatives for block in world chisel(\"inventory\", target: string, limit?: number) Result Tries to chisel item in selected slot in inventory up to limit amount. Result will be put into inventory, extra items will be dropped in world chisel(\"block\", target: string, direction?: Direction ) Result Tries to chisel block in world. If this is possible, block will be transformed in-place, if this is not possible result will be put into inventory, extra items will be dropped in world rotate(rotation: Rotation, direction?: Direction ) Result Tries to rotate block in-place turnOver(direction?: Direction ) Result Tries to turn over block in-place getPossibleShapes(direction?: Direction ) table Returns list of possible shapes for block changeShape(shape: string, direction?: Direction ) Result Tries to transform block to passed shape Notes \u00b6 Extra information about blocks To help you understand position of block, mason automata will return extra information when using Look API { \"name\" : \"Mossy Stone Brick Stairs\" , \"tags\" : [ \"minecraft:stairs\" , \"minecraft:mineable/pickaxe\" ], \"properties\" : { \"facing\" : \"north\" , \"half\" : \"bottom\" , \"shape\" : \"straight\" , \"watterlogged\" : \"false\" } }","title":"Mason automata"},{"location":"Turtlematic/automata/mason/#mason-automata","text":"Picture Automata that harness power of mason villager, allows you to modify appearance of different blocks in world and inventory. Mason automata also has mod support: Chipped","title":"Mason automata"},{"location":"Turtlematic/automata/mason/#obtaining","text":"Feed mason villager to forged automata core with soul scrapper to obtain it.","title":"Obtaining"},{"location":"Turtlematic/automata/mason/#supported-apis","text":"Configuration API Fuel API Operation API Look API Suck API Experience API","title":"Supported APIs"},{"location":"Turtlematic/automata/mason/#extra-methods","text":"Function Returns Description getAlternatives(\"inventory\") table Returns list of possible alternatives for item in selected slot getAlternatives(\"block\", direction?: Direction ) table Returns list of possible alternatives for block in world chisel(\"inventory\", target: string, limit?: number) Result Tries to chisel item in selected slot in inventory up to limit amount. Result will be put into inventory, extra items will be dropped in world chisel(\"block\", target: string, direction?: Direction ) Result Tries to chisel block in world. If this is possible, block will be transformed in-place, if this is not possible result will be put into inventory, extra items will be dropped in world rotate(rotation: Rotation, direction?: Direction ) Result Tries to rotate block in-place turnOver(direction?: Direction ) Result Tries to turn over block in-place getPossibleShapes(direction?: Direction ) table Returns list of possible shapes for block changeShape(shape: string, direction?: Direction ) Result Tries to transform block to passed shape","title":"Extra methods"},{"location":"Turtlematic/automata/mason/#notes","text":"Extra information about blocks To help you understand position of block, mason automata will return extra information when using Look API { \"name\" : \"Mossy Stone Brick Stairs\" , \"tags\" : [ \"minecraft:stairs\" , \"minecraft:mineable/pickaxe\" ], \"properties\" : { \"facing\" : \"north\" , \"half\" : \"bottom\" , \"shape\" : \"straight\" , \"watterlogged\" : \"false\" } }","title":"Notes"},{"location":"Turtlematic/automata/mercantile/","text":"Mercantile automata \u00b6 Picture Automata that harness power of wandering trader, allows you to trade with other (more lucky) wandering traders and villagers. Obtaining \u00b6 Feed wandering trader to forged automata core with soul scrapper to obtain it. Supported APIs \u00b6 Configuration API Fuel API Operation API Look API Suck API Experience API Scan API : only for items and merchants Extra methods \u00b6 Function Returns Description trade(hint?: int, direction?: Direction ) Result [number] Performs a trade operation, taking as trading inputs item in selected slot and item next to it (if selected slot isn't last). Returns amount of purcased items. If several trades available with this combination of items, hint is required. Order of traders in sync with offers list from look function restock(direction?: Direction ) Result Tries to restock offers. Will work only for villagers, available for Starbound core version Notes \u00b6 XP notes XP from trading operations will not be gather automatically and should be collected via collectXP function How I can get information about merchant trades? Just use look(\"entity\") function! Output of merchant entity will be enriched with offers . Sometimes, this list can contains nil elements, which means, that this offers are out of stock. { \"type\" : \"Wandering Trader\" , \"name\" : \"Wandering Trader\" , \"category\" : \"CREATURE\" , \"id\" : 448 , \"tags\" :{ }, \"uuid\" : \"1816f543-4fc5-47c6-bf37-8d27451df116\" , \"offers\" :[ { \"inputs\" :[ { \"name\" : \"Emerald\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:emeralds\" , \"minecraft:beacon_payment_items\" ], \"technicalName\" : \"minecraft:emerald\" , \"count\" : 1 } ], \"outputs\" :[ { \"name\" : \"White Dye\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:dyes\" , \"c:white_dyes\" ], \"technicalName\" : \"minecraft:white_dye\" , \"count\" : 3 } ] }, { \"inputs\" :[ { \"name\" : \"Emerald\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:emeralds\" , \"minecraft:beacon_payment_items\" ], \"technicalName\" : \"minecraft:emerald\" , \"count\" : 5 } ], \"outputs\" :[ { \"name\" : \"Nautilus Shell\" , \"maxStackSize\" : 64 , \"tags\" :{ }, \"technicalName\" : \"minecraft:nautilus_shell\" , \"count\" : 1 } ] }, { \"inputs\" :[ { \"name\" : \"Emerald\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:emeralds\" , \"minecraft:beacon_payment_items\" ], \"technicalName\" : \"minecraft:emerald\" , \"count\" : 1 } ], \"outputs\" :[ { \"name\" : \"Wheat Seeds\" , \"maxStackSize\" : 64 , \"tags\" :{ }, \"technicalName\" : \"minecraft:wheat_seeds\" , \"count\" : 1 } ] }, { \"inputs\" :[ { \"name\" : \"Emerald\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:emeralds\" , \"minecraft:beacon_payment_items\" ], \"technicalName\" : \"minecraft:emerald\" , \"count\" : 1 } ], \"outputs\" :[ { \"name\" : \"Purple Dye\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:dyes\" , \"c:purple_dyes\" ], \"technicalName\" : \"minecraft:purple_dye\" , \"count\" : 3 } ] }, { \"inputs\" :[ { \"name\" : \"Emerald\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:emeralds\" , \"minecraft:beacon_payment_items\" ], \"technicalName\" : \"minecraft:emerald\" , \"count\" : 1 } ], \"outputs\" :[ { \"name\" : \"Light Blue Dye\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:light_blue_dyes\" , \"c:dyes\" ], \"technicalName\" : \"minecraft:light_blue_dye\" , \"count\" : 3 } ] }, { \"inputs\" :[ { \"name\" : \"Emerald\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:emeralds\" , \"minecraft:beacon_payment_items\" ], \"technicalName\" : \"minecraft:emerald\" , \"count\" : 3 } ], \"outputs\" :[ { \"name\" : \"Podzol\" , \"maxStackSize\" : 64 , \"tags\" :[ \"minecraft:dirt\" ], \"technicalName\" : \"minecraft:podzol\" , \"count\" : 3 } ] } ] }","title":"Mercantile automata"},{"location":"Turtlematic/automata/mercantile/#mercantile-automata","text":"Picture Automata that harness power of wandering trader, allows you to trade with other (more lucky) wandering traders and villagers.","title":"Mercantile automata"},{"location":"Turtlematic/automata/mercantile/#obtaining","text":"Feed wandering trader to forged automata core with soul scrapper to obtain it.","title":"Obtaining"},{"location":"Turtlematic/automata/mercantile/#supported-apis","text":"Configuration API Fuel API Operation API Look API Suck API Experience API Scan API : only for items and merchants","title":"Supported APIs"},{"location":"Turtlematic/automata/mercantile/#extra-methods","text":"Function Returns Description trade(hint?: int, direction?: Direction ) Result [number] Performs a trade operation, taking as trading inputs item in selected slot and item next to it (if selected slot isn't last). Returns amount of purcased items. If several trades available with this combination of items, hint is required. Order of traders in sync with offers list from look function restock(direction?: Direction ) Result Tries to restock offers. Will work only for villagers, available for Starbound core version","title":"Extra methods"},{"location":"Turtlematic/automata/mercantile/#notes","text":"XP notes XP from trading operations will not be gather automatically and should be collected via collectXP function How I can get information about merchant trades? Just use look(\"entity\") function! Output of merchant entity will be enriched with offers . Sometimes, this list can contains nil elements, which means, that this offers are out of stock. { \"type\" : \"Wandering Trader\" , \"name\" : \"Wandering Trader\" , \"category\" : \"CREATURE\" , \"id\" : 448 , \"tags\" :{ }, \"uuid\" : \"1816f543-4fc5-47c6-bf37-8d27451df116\" , \"offers\" :[ { \"inputs\" :[ { \"name\" : \"Emerald\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:emeralds\" , \"minecraft:beacon_payment_items\" ], \"technicalName\" : \"minecraft:emerald\" , \"count\" : 1 } ], \"outputs\" :[ { \"name\" : \"White Dye\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:dyes\" , \"c:white_dyes\" ], \"technicalName\" : \"minecraft:white_dye\" , \"count\" : 3 } ] }, { \"inputs\" :[ { \"name\" : \"Emerald\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:emeralds\" , \"minecraft:beacon_payment_items\" ], \"technicalName\" : \"minecraft:emerald\" , \"count\" : 5 } ], \"outputs\" :[ { \"name\" : \"Nautilus Shell\" , \"maxStackSize\" : 64 , \"tags\" :{ }, \"technicalName\" : \"minecraft:nautilus_shell\" , \"count\" : 1 } ] }, { \"inputs\" :[ { \"name\" : \"Emerald\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:emeralds\" , \"minecraft:beacon_payment_items\" ], \"technicalName\" : \"minecraft:emerald\" , \"count\" : 1 } ], \"outputs\" :[ { \"name\" : \"Wheat Seeds\" , \"maxStackSize\" : 64 , \"tags\" :{ }, \"technicalName\" : \"minecraft:wheat_seeds\" , \"count\" : 1 } ] }, { \"inputs\" :[ { \"name\" : \"Emerald\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:emeralds\" , \"minecraft:beacon_payment_items\" ], \"technicalName\" : \"minecraft:emerald\" , \"count\" : 1 } ], \"outputs\" :[ { \"name\" : \"Purple Dye\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:dyes\" , \"c:purple_dyes\" ], \"technicalName\" : \"minecraft:purple_dye\" , \"count\" : 3 } ] }, { \"inputs\" :[ { \"name\" : \"Emerald\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:emeralds\" , \"minecraft:beacon_payment_items\" ], \"technicalName\" : \"minecraft:emerald\" , \"count\" : 1 } ], \"outputs\" :[ { \"name\" : \"Light Blue Dye\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:light_blue_dyes\" , \"c:dyes\" ], \"technicalName\" : \"minecraft:light_blue_dye\" , \"count\" : 3 } ] }, { \"inputs\" :[ { \"name\" : \"Emerald\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:emeralds\" , \"minecraft:beacon_payment_items\" ], \"technicalName\" : \"minecraft:emerald\" , \"count\" : 3 } ], \"outputs\" :[ { \"name\" : \"Podzol\" , \"maxStackSize\" : 64 , \"tags\" :[ \"minecraft:dirt\" ], \"technicalName\" : \"minecraft:podzol\" , \"count\" : 3 } ] } ] }","title":"Notes"},{"location":"Turtlematic/automata/protective/","text":"Protective automata \u00b6 Picture Supported versions Forge : 1.19.4, 1.20.x Fabric : 1.19.4, 1.20.x Advanced automata that can harness power of the iron golem to protect. This automata provider extra capabilities of take care of hostile mobs. Obtaining \u00b6 Feed 1 iron golem soul to automata core with soul scrapper to obtain it. Supported APIs \u00b6 Configuration API Fuel API Operation API Look API Suck API Interaction API : allows interaction with blocks and some entities Scan API : allows interaction with items and some entities Capture API : only interaction with some entities AI API : only interaction with some entities Notes \u00b6 Which entity are usable for protective automata If all of criteria are met: Entity is hostile Entity doesn't have \"creature\" category Entity doesn't have turtlematic:husbandry_extra_animal tag","title":"Protective automata"},{"location":"Turtlematic/automata/protective/#protective-automata","text":"Picture Supported versions Forge : 1.19.4, 1.20.x Fabric : 1.19.4, 1.20.x Advanced automata that can harness power of the iron golem to protect. This automata provider extra capabilities of take care of hostile mobs.","title":"Protective automata"},{"location":"Turtlematic/automata/protective/#obtaining","text":"Feed 1 iron golem soul to automata core with soul scrapper to obtain it.","title":"Obtaining"},{"location":"Turtlematic/automata/protective/#supported-apis","text":"Configuration API Fuel API Operation API Look API Suck API Interaction API : allows interaction with blocks and some entities Scan API : allows interaction with items and some entities Capture API : only interaction with some entities AI API : only interaction with some entities","title":"Supported APIs"},{"location":"Turtlematic/automata/protective/#notes","text":"Which entity are usable for protective automata If all of criteria are met: Entity is hostile Entity doesn't have \"creature\" category Entity doesn't have turtlematic:husbandry_extra_animal tag","title":"Notes"},{"location":"Turtlematic/automata/smithing/","text":"Smithing automata \u00b6 Picture Automata that harness power of toolsmithing villager, allows you to perform smithing operation and smelt items. Obtaining \u00b6 Feed toolsmithing villager to forged automata core with soul scrapper to obtain it. Supported APIs \u00b6 Configuration API Fuel API Operation API Look API Suck API Experience API Extra methods \u00b6 Function Returns Description smith() Result Perform smithing operation, using selected slot and two next slots smelt(\"inventory\", limit?: number) Result Tries to smelt item in selected slot in inventory up to limit amount. Result will be put into inventory, extra items will be dropped in world smelt(\"block\", direction?: Direction Result Tries to smelt block in world. If this is possible, block will be transformed in-place, if this is not possible result will be put into inventory, extra items will be dropped in world Notes \u00b6 Smith operation Before 1.20, smith operation uses only selected slot and next one. XP notes All XP for smelting operations will be stored inside turtle","title":"Smithing automata"},{"location":"Turtlematic/automata/smithing/#smithing-automata","text":"Picture Automata that harness power of toolsmithing villager, allows you to perform smithing operation and smelt items.","title":"Smithing automata"},{"location":"Turtlematic/automata/smithing/#obtaining","text":"Feed toolsmithing villager to forged automata core with soul scrapper to obtain it.","title":"Obtaining"},{"location":"Turtlematic/automata/smithing/#supported-apis","text":"Configuration API Fuel API Operation API Look API Suck API Experience API","title":"Supported APIs"},{"location":"Turtlematic/automata/smithing/#extra-methods","text":"Function Returns Description smith() Result Perform smithing operation, using selected slot and two next slots smelt(\"inventory\", limit?: number) Result Tries to smelt item in selected slot in inventory up to limit amount. Result will be put into inventory, extra items will be dropped in world smelt(\"block\", direction?: Direction Result Tries to smelt block in world. If this is possible, block will be transformed in-place, if this is not possible result will be put into inventory, extra items will be dropped in world","title":"Extra methods"},{"location":"Turtlematic/automata/smithing/#notes","text":"Smith operation Before 1.20, smith operation uses only selected slot and next one. XP notes All XP for smelting operations will be stored inside turtle","title":"Notes"},{"location":"Turtlematic/miscellaneous/bow/","text":"Shooting turtle \u00b6 Picture Supported versions Fabric : 1.19.4, 1.20.x Forge : 1.19.4, 1.20.x Maybe someone had a dream about turtle, finally shooting items from a bow? Well, now this dream come true. This turtle now capable of sending any items to the sky (or little closer). If the item hits any block or entity with inventory, it will be automatically stored in it. If the item is an arrow, it will be shot as an arrow from the dispenser. Of course, the item can just hit the ground and after some time will be available to pickup as a regular item on the ground. Supported APIs \u00b6 Configuration API Fuel API Operation API Peripheral methods \u00b6 Function Returns Description getAngle() number Returns current bow angle setAngle(angle:number) nil Set bow angle to new value shoot(power: number, limit?:number, suppressExtraLogic?: boolean) Result Tries to shoot item. If item is arrow and suppressExtraLogic is false, item will be shot like arrow instead of just item projectile","title":"Shooting turtle"},{"location":"Turtlematic/miscellaneous/bow/#shooting-turtle","text":"Picture Supported versions Fabric : 1.19.4, 1.20.x Forge : 1.19.4, 1.20.x Maybe someone had a dream about turtle, finally shooting items from a bow? Well, now this dream come true. This turtle now capable of sending any items to the sky (or little closer). If the item hits any block or entity with inventory, it will be automatically stored in it. If the item is an arrow, it will be shot as an arrow from the dispenser. Of course, the item can just hit the ground and after some time will be available to pickup as a regular item on the ground.","title":"Shooting turtle"},{"location":"Turtlematic/miscellaneous/bow/#supported-apis","text":"Configuration API Fuel API Operation API","title":"Supported APIs"},{"location":"Turtlematic/miscellaneous/bow/#peripheral-methods","text":"Function Returns Description getAngle() number Returns current bow angle setAngle(angle:number) nil Set bow angle to new value shoot(power: number, limit?:number, suppressExtraLogic?: boolean) Result Tries to shoot item. If item is arrow and suppressExtraLogic is false, item will be shot like arrow instead of just item projectile","title":"Peripheral methods"},{"location":"Turtlematic/miscellaneous/chunk_vial/","text":"Chunk vial turtle \u00b6 Picture With help of this little chunk vial, your turtle will never be unloaded again! Place this upgrade to turtle, to allow it to work even if you are far away, chunk with this turtle will always be loaded!","title":"Chunk vial turtle"},{"location":"Turtlematic/miscellaneous/chunk_vial/#chunk-vial-turtle","text":"Picture With help of this little chunk vial, your turtle will never be unloaded again! Place this upgrade to turtle, to allow it to work even if you are far away, chunk with this turtle will always be loaded!","title":"Chunk vial turtle"},{"location":"Turtlematic/miscellaneous/creative_chest/","text":"Creative chest \u00b6 Picture Why the hell in creative mode turtle can't generate items? Tell no more, this upgrade just for you. Function Returns Description generate(item: string, count: number, nbtData?: string) Result Tries to put required item with required count into turtle inventory How in hell does nbtData works? NBT data passing from ComputerCraft to Minecraft are ... complicated task. So currently, nbtData are just string that expected to be minecraft NBT data serialized into json. You can try generate(\"minecraft:potion\", 1, \"{Potion:\\\"minecraft:long_regeneration\\\"}\") to understand how it works","title":"Creative chest"},{"location":"Turtlematic/miscellaneous/creative_chest/#creative-chest","text":"Picture Why the hell in creative mode turtle can't generate items? Tell no more, this upgrade just for you. Function Returns Description generate(item: string, count: number, nbtData?: string) Result Tries to put required item with required count into turtle inventory How in hell does nbtData works? NBT data passing from ComputerCraft to Minecraft are ... complicated task. So currently, nbtData are just string that expected to be minecraft NBT data serialized into json. You can try generate(\"minecraft:potion\", 1, \"{Potion:\\\"minecraft:long_regeneration\\\"}\") to understand how it works","title":"Creative chest"},{"location":"Turtlematic/miscellaneous/lava_bucket/","text":"Lava bucket turtle \u00b6 Picture Did you tired from a lot of random trash in your turtle inventory? Tell me no more, now you can use lava bucket as peripheral for turtle to void items in your inventory Peripheral methods \u00b6 Function Returns Description void() nil Deletes item in selected slot","title":"Lava bucket turtle"},{"location":"Turtlematic/miscellaneous/lava_bucket/#lava-bucket-turtle","text":"Picture Did you tired from a lot of random trash in your turtle inventory? Tell me no more, now you can use lava bucket as peripheral for turtle to void items in your inventory","title":"Lava bucket turtle"},{"location":"Turtlematic/miscellaneous/lava_bucket/#peripheral-methods","text":"Function Returns Description void() nil Deletes item in selected slot","title":"Peripheral methods"},{"location":"Turtlematic/miscellaneous/mimic/","text":"Mimic \u00b6 Picture Supported versions Fabric : 1.20.x Forge : 1.20.x Mimic turtle as you would expect, can mimic any block in the game. Even if a block has custom rendering (in most cases). So, do you want to scare your friend or maybe just built a flying elevator? Now it is completely possible. Peripheral methods \u00b6 Function Returns Description setTransformation(rml: RML ) nil Setter for transformation instructions getTransformation() RML or nil Returns current transformation instructions setMimic(block: BlockState , nbtData?: string) nil Setter for mimic block. nbtData will be used for loading information into fake block entity for rendering. NBT data should be passed as JSON string getMimic() BlockState or nil, table or nil Returns pair of current mimic block state and table with nbt data reset() nil Resets mimic turtle","title":"Mimic"},{"location":"Turtlematic/miscellaneous/mimic/#mimic","text":"Picture Supported versions Fabric : 1.20.x Forge : 1.20.x Mimic turtle as you would expect, can mimic any block in the game. Even if a block has custom rendering (in most cases). So, do you want to scare your friend or maybe just built a flying elevator? Now it is completely possible.","title":"Mimic"},{"location":"Turtlematic/miscellaneous/mimic/#peripheral-methods","text":"Function Returns Description setTransformation(rml: RML ) nil Setter for transformation instructions getTransformation() RML or nil Returns current transformation instructions setMimic(block: BlockState , nbtData?: string) nil Setter for mimic block. nbtData will be used for loading information into fake block entity for rendering. NBT data should be passed as JSON string getMimic() BlockState or nil, table or nil Returns pair of current mimic block state and table with nbt data reset() nil Resets mimic turtle","title":"Peripheral methods"},{"location":"Turtlematic/miscellaneous/piston_turtle/","text":"Piston and sticky piston turtles \u00b6 Picture So, this is piston turtle! Now piston and sticky piston are valid upgrades for turtles and can be attached to them! Piston methods \u00b6 Function Returns Description push(direction?: Direction ) Result Tries to push block that currently facing. Works exacly like piston Sticky piston methods \u00b6 Function Returns Description push(direction?: Direction ) Result Tries to push block that currently facing. Works exactly like piston pull(direction?: Direction ) Result Tries to pull block that currently facing. Between this block and turtle should be one empty block. Works exactly like sticky piston collapsing","title":"Piston and sticky piston turtles"},{"location":"Turtlematic/miscellaneous/piston_turtle/#piston-and-sticky-piston-turtles","text":"Picture So, this is piston turtle! Now piston and sticky piston are valid upgrades for turtles and can be attached to them!","title":"Piston and sticky piston turtles"},{"location":"Turtlematic/miscellaneous/piston_turtle/#piston-methods","text":"Function Returns Description push(direction?: Direction ) Result Tries to push block that currently facing. Works exacly like piston","title":"Piston methods"},{"location":"Turtlematic/miscellaneous/piston_turtle/#sticky-piston-methods","text":"Function Returns Description push(direction?: Direction ) Result Tries to push block that currently facing. Works exactly like piston pull(direction?: Direction ) Result Tries to pull block that currently facing. Between this block and turtle should be one empty block. Works exactly like sticky piston collapsing","title":"Sticky piston methods"},{"location":"Turtlematic/miscellaneous/soul_scrapper/","text":"Soul scrapper \u00b6 Picture Terrible tool, that allows you to infuse an item in a selected slot with soul of any mob, that you will find on the way. What I can infuse? Currently, only automata core can be infused Function Returns Description harvestSoul() Result Tries to harvest entity soul at line of sight of turtle into item in selected slot getLeftEntities() table or nil, string or nil Tries to get information about left entities to fill soul. Returns table if item in selected slot have started consuming soul and nil with error otherwise getLeftEntities output examples [ { \"name\" : \"Cow\" , \"leftCount\" : 1 }, { \"name\" : \"Sheep\" , \"leftCount\" : 1 }, { \"name\" : \"Pig\" , \"leftCount\" : 1 } ]","title":"Soul scrapper"},{"location":"Turtlematic/miscellaneous/soul_scrapper/#soul-scrapper","text":"Picture Terrible tool, that allows you to infuse an item in a selected slot with soul of any mob, that you will find on the way. What I can infuse? Currently, only automata core can be infused Function Returns Description harvestSoul() Result Tries to harvest entity soul at line of sight of turtle into item in selected slot getLeftEntities() table or nil, string or nil Tries to get information about left entities to fill soul. Returns table if item in selected slot have started consuming soul and nil with error otherwise getLeftEntities output examples [ { \"name\" : \"Cow\" , \"leftCount\" : 1 }, { \"name\" : \"Sheep\" , \"leftCount\" : 1 }, { \"name\" : \"Pig\" , \"leftCount\" : 1 } ]","title":"Soul scrapper"},{"location":"Turtlematic/miscellaneous/turtle_chatter/","text":"Turtle chatter \u00b6 Turtle chatter is a small module that allows you to display messages above turtle. Info Text will be additionally wrapped and text will be shifted to new line in case when it is longer than 160 pixels. Line breaker symbol \\n works. Currently message can be only 6 lines, extra lines will be ignored. Warning This upgrade is experimental. Text render can sometimes be pretty ugly, also this is possible for API changes Function Returns Description getMessage() string? Returns current stored message setMessage(text: string) nil Update stored message clearMessage() nil Clears stored message How can I get colored text? You can pass minecraft formatting symbols. For example setMessage(\"\\xA74Red message\") will generate red message, because \\xA7 converts into \u00a7 and 4 is dark red.","title":"Turtle chatter"},{"location":"Turtlematic/miscellaneous/turtle_chatter/#turtle-chatter","text":"Turtle chatter is a small module that allows you to display messages above turtle. Info Text will be additionally wrapped and text will be shifted to new line in case when it is longer than 160 pixels. Line breaker symbol \\n works. Currently message can be only 6 lines, extra lines will be ignored. Warning This upgrade is experimental. Text render can sometimes be pretty ugly, also this is possible for API changes Function Returns Description getMessage() string? Returns current stored message setMessage(text: string) nil Update stored message clearMessage() nil Clears stored message How can I get colored text? You can pass minecraft formatting symbols. For example setMessage(\"\\xA74Red message\") will generate red message, because \\xA7 converts into \u00a7 and 4 is dark red.","title":"Turtle chatter"},{"location":"UnlimitedPeripheralWorks/","text":"Home \u00b6 UnlimitedPeripheralWorks is addon focused on providing a lot of peripherals for existing blocks. General improvements \u00b6 ItemStorage from fabric introduced, to works with inventories, that supports only fabric transfer API. FluidStorage from fabric introduced, allows fluid transfering similar to CC:T fluid_storage API. Should works on any fluid tank. List of new peripherals \u00b6 Pedestals! Item pedestal to display items and view NBT data, map pedestal to inspect map data and display pedestal for nice decoration and nasty inputs. Universal scanner to inspect surrouding Ultimate sensor to understand world around you Peripheralium hub to bypass turtle and pocket computers limitations! List of minecraft blocks \u00b6 Beacon Lectern Note block Jukebox Powered Rail List of integrations \u00b6 Team Reborn energy Lifts Applied Energistics 2 Modern Industrialization Nature's Compass Tom's Simple Storage Integrated Dynamics Occultism Easy Villagers Supported versions \u00b6 Forge : 1.20.x (features) Fabric : 1.18 (fixes), 1.19.2 (fixes), 1.20.x (features) Be sure to check supported version tips in different pages, if they are exists.","title":"Home"},{"location":"UnlimitedPeripheralWorks/#home","text":"UnlimitedPeripheralWorks is addon focused on providing a lot of peripherals for existing blocks.","title":"Home"},{"location":"UnlimitedPeripheralWorks/#general-improvements","text":"ItemStorage from fabric introduced, to works with inventories, that supports only fabric transfer API. FluidStorage from fabric introduced, allows fluid transfering similar to CC:T fluid_storage API. Should works on any fluid tank.","title":"General improvements"},{"location":"UnlimitedPeripheralWorks/#list-of-new-peripherals","text":"Pedestals! Item pedestal to display items and view NBT data, map pedestal to inspect map data and display pedestal for nice decoration and nasty inputs. Universal scanner to inspect surrouding Ultimate sensor to understand world around you Peripheralium hub to bypass turtle and pocket computers limitations!","title":"List of new peripherals"},{"location":"UnlimitedPeripheralWorks/#list-of-minecraft-blocks","text":"Beacon Lectern Note block Jukebox Powered Rail","title":"List of minecraft blocks"},{"location":"UnlimitedPeripheralWorks/#list-of-integrations","text":"Team Reborn energy Lifts Applied Energistics 2 Modern Industrialization Nature's Compass Tom's Simple Storage Integrated Dynamics Occultism Easy Villagers","title":"List of integrations"},{"location":"UnlimitedPeripheralWorks/#supported-versions","text":"Forge : 1.20.x (features) Fabric : 1.18 (fixes), 1.19.2 (fixes), 1.20.x (features) Be sure to check supported version tips in different pages, if they are exists.","title":"Supported versions"},{"location":"UnlimitedPeripheralWorks/blocks/flexible_reality_anchor/","text":"Flexible reality anchor \u00b6 Picture Flexible reality anchors are blocks that can be altered by Reality forger to mimic another block, be player- or light-passable, or even be invisible! Flexible reality anchors store information when you break them and also allow you to manipulate this information via crafting table: - Putting an altered, flexible reality anchor on the crafting table alone allows you to clean it up. - Putting altered flexible reality anchor with some empty flexible reality anchors on the crafting table allows you to copy it.","title":"Flexible reality anchor"},{"location":"UnlimitedPeripheralWorks/blocks/flexible_reality_anchor/#flexible-reality-anchor","text":"Picture Flexible reality anchors are blocks that can be altered by Reality forger to mimic another block, be player- or light-passable, or even be invisible! Flexible reality anchors store information when you break them and also allow you to manipulate this information via crafting table: - Putting an altered, flexible reality anchor on the crafting table alone allows you to clean it up. - Putting altered flexible reality anchor with some empty flexible reality anchors on the crafting table allows you to copy it.","title":"Flexible reality anchor"},{"location":"UnlimitedPeripheralWorks/blocks/flexible_statue/","text":"Flexible statue \u00b6 Picture Flexible statues are blocks that can be altered by Statue workbench to mimic another block, be player- or light-passable, or even be invisible! Flexible statues store information when you break them and also allow you to manipulate this information via crafting table: - Putting an altered, flexible statue on the crafting table alone allows you to clean it up. - Putting altered flexible statues with some empty flexible statues on the crafting table allows you to copy them.","title":"Flexible statue"},{"location":"UnlimitedPeripheralWorks/blocks/flexible_statue/#flexible-statue","text":"Picture Flexible statues are blocks that can be altered by Statue workbench to mimic another block, be player- or light-passable, or even be invisible! Flexible statues store information when you break them and also allow you to manipulate this information via crafting table: - Putting an altered, flexible statue on the crafting table alone allows you to clean it up. - Putting altered flexible statues with some empty flexible statues on the crafting table allows you to copy them.","title":"Flexible statue"},{"location":"UnlimitedPeripheralWorks/integrations/additional_lanterns/","text":"Additional lanterns \u00b6 Picture Supported versions Forge : 1.20.x Fabric : 1.20.x Additional Lanterns adds many new lanterns with different colors and materials! And with our internation, you can enable and disable them via simple API. Peripheral methods \u00b6 Function Returns Description isEnabled() boolean Returns true if lantern is enabled and false otherwise toggle() true Toggle the lantern","title":"Additional lanterns"},{"location":"UnlimitedPeripheralWorks/integrations/additional_lanterns/#additional-lanterns","text":"Picture Supported versions Forge : 1.20.x Fabric : 1.20.x Additional Lanterns adds many new lanterns with different colors and materials! And with our internation, you can enable and disable them via simple API.","title":"Additional lanterns"},{"location":"UnlimitedPeripheralWorks/integrations/additional_lanterns/#peripheral-methods","text":"Function Returns Description isEnabled() boolean Returns true if lantern is enabled and false otherwise toggle() true Toggle the lantern","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/integrations/ae2/","text":"Applied Energistics 2 \u00b6 Applied Energistics 2 is a mod for Minecraft which contains a large amount of new content, mostly centered around the concept of using Energy, and the Transformation of Energy in a unique way. This integration allows you to interact with AE2 network itself, transforming some blocks (CPU cores, energy modules) into peripheral, that would provide full-featured AE2 integration. Okey, so what I can use exacly to access AE2 network peripheral? Any of this blocks, if they are connected to network Any Energy cell Any crafting block: unit, co-processor or storage Crystal grown accelerator Supported versions Fabric : 1.18, 1.19.2, 1.20.x Forge : 1.20.x Supported APIs \u00b6 Item storage API for all items, that stored inside system Fluid storage API for all fluids, that stored inside system Energy storage API for energy inside system. Additional peripheral methods \u00b6 Function Returns Description getAverageEnergyDemand() number Returns average energy demand of AE2 system getAverageEnergyIncome() number Returns average energy income for AE2 system getChannelEnergyDemand() number Returns amount of energy that spent for channels getChannelInformation() table Returns information about maxium and actual amount of channels in AE2 getCraftingCPUs() table Returns detailed information about crafting CPUS, including name, capacity, storage and occupation getCraftableItems() table Returns list of craftable items inside AE2 system getCraftableFluids() table Returns list of craftable fluids inside AE2 system getPatternsFor(\"item\", item_id: String) table Returns list of patterns, that exists for particual item inside AE2 system getPatternsFor(\"fluid\", fluid_id: String) table Returns list of patterns, that exists for particual fluid inside AE2 system scheduleCrafting(\"item\", item_id: String, amount?: number, targetCPU?: string) Result Try to schedule crafting for an item scheduleCrafting(\"fluid\", fluid_id: String, amount?: number, targetCPU?: string) Result Try to schedule crafting for an fluid Output examples \u00b6 getChannelInformation example { \"maxChannels\" : 8 , \"usedChannels\" : 5 } getCraftingCPUs example [ { \"capacity\" : 1 , \"isBusy\" : false , \"storage\" : 262144 , \"name\" : \"CPUH\" } ] getCraftableItems example [ { \"name\" : \"Oak Planks\" , \"technicalName\" : \"minecraft:oak_planks\" } ] getCraftableFluids example { \"name\" : \"minecraft:lava\" } getPatternsFor example [ { \"inputs\" : [ { \"count\" : 1 , \"maxStackCount\" : 64 , \"name\" : \"Oak logs\" , \"tags\" : {}, \"techicalName\" : \"minecraft:oak_log\" , \"type\" : \"item\" } ], \"outputs\" : [ { \"count\" : 4 , \"maxStackCount\" : 64 , \"name\" : \"Oak Planks\" , \"tags\" : {}, \"techicalName\" : \"minecraft:oak_planks\" , \"type\" : \"item\" } ] } ]","title":"Applied Energistics 2"},{"location":"UnlimitedPeripheralWorks/integrations/ae2/#applied-energistics-2","text":"Applied Energistics 2 is a mod for Minecraft which contains a large amount of new content, mostly centered around the concept of using Energy, and the Transformation of Energy in a unique way. This integration allows you to interact with AE2 network itself, transforming some blocks (CPU cores, energy modules) into peripheral, that would provide full-featured AE2 integration. Okey, so what I can use exacly to access AE2 network peripheral? Any of this blocks, if they are connected to network Any Energy cell Any crafting block: unit, co-processor or storage Crystal grown accelerator Supported versions Fabric : 1.18, 1.19.2, 1.20.x Forge : 1.20.x","title":"Applied Energistics 2"},{"location":"UnlimitedPeripheralWorks/integrations/ae2/#supported-apis","text":"Item storage API for all items, that stored inside system Fluid storage API for all fluids, that stored inside system Energy storage API for energy inside system.","title":"Supported APIs"},{"location":"UnlimitedPeripheralWorks/integrations/ae2/#additional-peripheral-methods","text":"Function Returns Description getAverageEnergyDemand() number Returns average energy demand of AE2 system getAverageEnergyIncome() number Returns average energy income for AE2 system getChannelEnergyDemand() number Returns amount of energy that spent for channels getChannelInformation() table Returns information about maxium and actual amount of channels in AE2 getCraftingCPUs() table Returns detailed information about crafting CPUS, including name, capacity, storage and occupation getCraftableItems() table Returns list of craftable items inside AE2 system getCraftableFluids() table Returns list of craftable fluids inside AE2 system getPatternsFor(\"item\", item_id: String) table Returns list of patterns, that exists for particual item inside AE2 system getPatternsFor(\"fluid\", fluid_id: String) table Returns list of patterns, that exists for particual fluid inside AE2 system scheduleCrafting(\"item\", item_id: String, amount?: number, targetCPU?: string) Result Try to schedule crafting for an item scheduleCrafting(\"fluid\", fluid_id: String, amount?: number, targetCPU?: string) Result Try to schedule crafting for an fluid","title":"Additional peripheral methods"},{"location":"UnlimitedPeripheralWorks/integrations/ae2/#output-examples","text":"getChannelInformation example { \"maxChannels\" : 8 , \"usedChannels\" : 5 } getCraftingCPUs example [ { \"capacity\" : 1 , \"isBusy\" : false , \"storage\" : 262144 , \"name\" : \"CPUH\" } ] getCraftableItems example [ { \"name\" : \"Oak Planks\" , \"technicalName\" : \"minecraft:oak_planks\" } ] getCraftableFluids example { \"name\" : \"minecraft:lava\" } getPatternsFor example [ { \"inputs\" : [ { \"count\" : 1 , \"maxStackCount\" : 64 , \"name\" : \"Oak logs\" , \"tags\" : {}, \"techicalName\" : \"minecraft:oak_log\" , \"type\" : \"item\" } ], \"outputs\" : [ { \"count\" : 4 , \"maxStackCount\" : 64 , \"name\" : \"Oak Planks\" , \"tags\" : {}, \"techicalName\" : \"minecraft:oak_planks\" , \"type\" : \"item\" } ] } ]","title":"Output examples"},{"location":"UnlimitedPeripheralWorks/integrations/alloy_forgery/","text":"Alloy forgery \u00b6 Picture Supported versions Fabric : 1.20.x Alloy Forgery adds a multiblock alloy smelter, the Alloy Forge. In its base configuration it serves as an easy way to increase ore yield, but everything is data-driven allowing you to add new forges and recipes as you please. Integration allows one to inspect meta-information about the forge as well as feed it with items and fuel and extract results. Supported APIs \u00b6 inventory API Peripheral methods \u00b6 Function Returns Description inspect() table Returns meta information about forge, such as amount of fuel, smelt time and progress","title":"Alloy forgery"},{"location":"UnlimitedPeripheralWorks/integrations/alloy_forgery/#alloy-forgery","text":"Picture Supported versions Fabric : 1.20.x Alloy Forgery adds a multiblock alloy smelter, the Alloy Forge. In its base configuration it serves as an easy way to increase ore yield, but everything is data-driven allowing you to add new forges and recipes as you please. Integration allows one to inspect meta-information about the forge as well as feed it with items and fuel and extract results.","title":"Alloy forgery"},{"location":"UnlimitedPeripheralWorks/integrations/alloy_forgery/#supported-apis","text":"inventory API","title":"Supported APIs"},{"location":"UnlimitedPeripheralWorks/integrations/alloy_forgery/#peripheral-methods","text":"Function Returns Description inspect() table Returns meta information about forge, such as amount of fuel, smelt time and progress","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/integrations/easy_villagers/","text":"Easy Villagers \u00b6 Picture Easy Villagers is a mod that simplifies villager trading a lot and provides the ability to automatically trade with them. Supported versions Forge : 1.19.4, 1.20.x Trader \u00b6 Since trader doesn't allow automated villager trading, the integration will not break this approach, but instead, it allows you to observe information about offers and the level of villager inside the trading machine. Peripheral methods \u00b6 Function Returns Description hasVillager() boolean Returns true if villager inside trader, false otherwise inspect() table or nil Returns information about villager inside trader or nil if a villager is not present Inspect example { \"type\" : \"Villager\" , \"name\" : \"Villager\" , \"category\" : \"CREATURE\" , \"id\" : 448 , \"tags\" :{}, \"uuid\" : \"1816f543-4fc5-47c6-bf37-8d27451df116\" , \"offers\" :[ { \"inputs\" :[ { \"name\" : \"Emerald\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:emeralds\" , \"minecraft:beacon_payment_items\" ], \"technicalName\" : \"minecraft:emerald\" , \"count\" : 1 } ], \"outputs\" :[ { \"name\" : \"White Dye\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:dyes\" , \"c:white_dyes\" ], \"technicalName\" : \"minecraft:white_dye\" , \"count\" : 3 } ] }, { \"inputs\" :[ { \"name\" : \"Emerald\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:emeralds\" , \"minecraft:beacon_payment_items\" ], \"technicalName\" : \"minecraft:emerald\" , \"count\" : 5 } ], \"outputs\" :[ { \"name\" : \"Nautilus Shell\" , \"maxStackSize\" : 64 , \"tags\" :{ }, \"technicalName\" : \"minecraft:nautilus_shell\" , \"count\" : 1 } ] }, { \"inputs\" :[ { \"name\" : \"Emerald\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:emeralds\" , \"minecraft:beacon_payment_items\" ], \"technicalName\" : \"minecraft:emerald\" , \"count\" : 1 } ], \"outputs\" :[ { \"name\" : \"Wheat Seeds\" , \"maxStackSize\" : 64 , \"tags\" :{ }, \"technicalName\" : \"minecraft:wheat_seeds\" , \"count\" : 1 } ] }, { \"inputs\" :[ { \"name\" : \"Emerald\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:emeralds\" , \"minecraft:beacon_payment_items\" ], \"technicalName\" : \"minecraft:emerald\" , \"count\" : 1 } ], \"outputs\" :[ { \"name\" : \"Purple Dye\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:dyes\" , \"c:purple_dyes\" ], \"technicalName\" : \"minecraft:purple_dye\" , \"count\" : 3 } ] }, { \"inputs\" :[ { \"name\" : \"Emerald\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:emeralds\" , \"minecraft:beacon_payment_items\" ], \"technicalName\" : \"minecraft:emerald\" , \"count\" : 1 } ], \"outputs\" :[ { \"name\" : \"Light Blue Dye\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:light_blue_dyes\" , \"c:dyes\" ], \"technicalName\" : \"minecraft:light_blue_dye\" , \"count\" : 3 } ] }, { \"inputs\" :[ { \"name\" : \"Emerald\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:emeralds\" , \"minecraft:beacon_payment_items\" ], \"technicalName\" : \"minecraft:emerald\" , \"count\" : 3 } ], \"outputs\" :[ { \"name\" : \"Podzol\" , \"maxStackSize\" : 64 , \"tags\" :[ \"minecraft:dirt\" ], \"technicalName\" : \"minecraft:podzol\" , \"count\" : 3 } ] } ] } Auto trader \u00b6 The auto trader provides the same methods are trader does, but also it allows you to access internal storage via inventory API and configure selected trade. Peripheral methods \u00b6 Function Returns Description getSelectedOffer() number Returns index of selected offer setSelectedOffer(index: number) Result Tries to change selected offer to new index","title":"Easy Villagers"},{"location":"UnlimitedPeripheralWorks/integrations/easy_villagers/#easy-villagers","text":"Picture Easy Villagers is a mod that simplifies villager trading a lot and provides the ability to automatically trade with them. Supported versions Forge : 1.19.4, 1.20.x","title":"Easy Villagers"},{"location":"UnlimitedPeripheralWorks/integrations/easy_villagers/#trader","text":"Since trader doesn't allow automated villager trading, the integration will not break this approach, but instead, it allows you to observe information about offers and the level of villager inside the trading machine.","title":"Trader"},{"location":"UnlimitedPeripheralWorks/integrations/easy_villagers/#peripheral-methods","text":"Function Returns Description hasVillager() boolean Returns true if villager inside trader, false otherwise inspect() table or nil Returns information about villager inside trader or nil if a villager is not present Inspect example { \"type\" : \"Villager\" , \"name\" : \"Villager\" , \"category\" : \"CREATURE\" , \"id\" : 448 , \"tags\" :{}, \"uuid\" : \"1816f543-4fc5-47c6-bf37-8d27451df116\" , \"offers\" :[ { \"inputs\" :[ { \"name\" : \"Emerald\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:emeralds\" , \"minecraft:beacon_payment_items\" ], \"technicalName\" : \"minecraft:emerald\" , \"count\" : 1 } ], \"outputs\" :[ { \"name\" : \"White Dye\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:dyes\" , \"c:white_dyes\" ], \"technicalName\" : \"minecraft:white_dye\" , \"count\" : 3 } ] }, { \"inputs\" :[ { \"name\" : \"Emerald\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:emeralds\" , \"minecraft:beacon_payment_items\" ], \"technicalName\" : \"minecraft:emerald\" , \"count\" : 5 } ], \"outputs\" :[ { \"name\" : \"Nautilus Shell\" , \"maxStackSize\" : 64 , \"tags\" :{ }, \"technicalName\" : \"minecraft:nautilus_shell\" , \"count\" : 1 } ] }, { \"inputs\" :[ { \"name\" : \"Emerald\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:emeralds\" , \"minecraft:beacon_payment_items\" ], \"technicalName\" : \"minecraft:emerald\" , \"count\" : 1 } ], \"outputs\" :[ { \"name\" : \"Wheat Seeds\" , \"maxStackSize\" : 64 , \"tags\" :{ }, \"technicalName\" : \"minecraft:wheat_seeds\" , \"count\" : 1 } ] }, { \"inputs\" :[ { \"name\" : \"Emerald\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:emeralds\" , \"minecraft:beacon_payment_items\" ], \"technicalName\" : \"minecraft:emerald\" , \"count\" : 1 } ], \"outputs\" :[ { \"name\" : \"Purple Dye\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:dyes\" , \"c:purple_dyes\" ], \"technicalName\" : \"minecraft:purple_dye\" , \"count\" : 3 } ] }, { \"inputs\" :[ { \"name\" : \"Emerald\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:emeralds\" , \"minecraft:beacon_payment_items\" ], \"technicalName\" : \"minecraft:emerald\" , \"count\" : 1 } ], \"outputs\" :[ { \"name\" : \"Light Blue Dye\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:light_blue_dyes\" , \"c:dyes\" ], \"technicalName\" : \"minecraft:light_blue_dye\" , \"count\" : 3 } ] }, { \"inputs\" :[ { \"name\" : \"Emerald\" , \"maxStackSize\" : 64 , \"tags\" :[ \"c:emeralds\" , \"minecraft:beacon_payment_items\" ], \"technicalName\" : \"minecraft:emerald\" , \"count\" : 3 } ], \"outputs\" :[ { \"name\" : \"Podzol\" , \"maxStackSize\" : 64 , \"tags\" :[ \"minecraft:dirt\" ], \"technicalName\" : \"minecraft:podzol\" , \"count\" : 3 } ] } ] }","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/integrations/easy_villagers/#auto-trader","text":"The auto trader provides the same methods are trader does, but also it allows you to access internal storage via inventory API and configure selected trade.","title":"Auto trader"},{"location":"UnlimitedPeripheralWorks/integrations/easy_villagers/#peripheral-methods_1","text":"Function Returns Description getSelectedOffer() number Returns index of selected offer setSelectedOffer(index: number) Result Tries to change selected offer to new index","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/integrations/integrated_dynamics/","text":"Integrated Dynamics \u00b6 Picture Supported versions Forge : 1.19.4, 1.20.x Integrated Dynamics is a mod that requires you to build networks for complex automation and system integration. It is a mix between bundled redstone, BuildCraft gates, and Applied Energistics-style networks. Bidirectional communication with Integration Dynamics network \u00b6 Info This type of communication implemented at 1.4.4 version, replacing old file-based communication Warning Data that is written by a computer is not persistent and would be wiped by server restarts. This type of communication allows you to connect to a computer via Machine Reader/Writer ID blocks. Each computer now has access to the new LuaAPI - integrated_dynamics , which contains three very easy-to-understand methods. Function Returns Description getInput() any Returns value that was written to computer by Machine Writer getOutput() string Returns value that was written by computer to Machine Reader setOutput(json: string) void Writes value to Machine Reader, value should be a dictionary encoded as json Extracting data from Integrated Dynamics \u00b6 For this goal, you can use Variable Store from Integrated Dynamics. By default, this store serves as a generic inventory. Integration modifies generic inventory methods to take variables into account. For example, if you run list() , you will receive enriched output { id = 1 , type = \"nbt\" , isDynamic = false , label = \"MyCuteVariable\" } To get the actual variable value, you can use getItemDetail(slot: int) method, which will calculate and return information about the variable in the required slot { id = 0 , type = \"nbt\" , isDynamic = false , label = \"MyCuteVariable\" , value = { v = { [ \"test.lua\" ] = \"THERE IS NO DATA HERER\" } } } Sending data to Integrated Dynamics network \u00b6 Warning This logic works only for UnlimitedPeripheralWorks 1.4.3 and less. Integration also provides a specific aspect for Machine Reader, called \"Directory inside computer\". This output has an NBT type and will read data from any file inside \"/integrateddynamics\" folder in the target computer and return it to the ID network as an NBT. All files should be utf-8 encoded. Example output { \"file_name_1\" : \"file_content_1\" , \"file_name_2\" : \"file_content_2\" }","title":"Integrated Dynamics"},{"location":"UnlimitedPeripheralWorks/integrations/integrated_dynamics/#integrated-dynamics","text":"Picture Supported versions Forge : 1.19.4, 1.20.x Integrated Dynamics is a mod that requires you to build networks for complex automation and system integration. It is a mix between bundled redstone, BuildCraft gates, and Applied Energistics-style networks.","title":"Integrated Dynamics"},{"location":"UnlimitedPeripheralWorks/integrations/integrated_dynamics/#bidirectional-communication-with-integration-dynamics-network","text":"Info This type of communication implemented at 1.4.4 version, replacing old file-based communication Warning Data that is written by a computer is not persistent and would be wiped by server restarts. This type of communication allows you to connect to a computer via Machine Reader/Writer ID blocks. Each computer now has access to the new LuaAPI - integrated_dynamics , which contains three very easy-to-understand methods. Function Returns Description getInput() any Returns value that was written to computer by Machine Writer getOutput() string Returns value that was written by computer to Machine Reader setOutput(json: string) void Writes value to Machine Reader, value should be a dictionary encoded as json","title":"Bidirectional communication with Integration Dynamics network"},{"location":"UnlimitedPeripheralWorks/integrations/integrated_dynamics/#extracting-data-from-integrated-dynamics","text":"For this goal, you can use Variable Store from Integrated Dynamics. By default, this store serves as a generic inventory. Integration modifies generic inventory methods to take variables into account. For example, if you run list() , you will receive enriched output { id = 1 , type = \"nbt\" , isDynamic = false , label = \"MyCuteVariable\" } To get the actual variable value, you can use getItemDetail(slot: int) method, which will calculate and return information about the variable in the required slot { id = 0 , type = \"nbt\" , isDynamic = false , label = \"MyCuteVariable\" , value = { v = { [ \"test.lua\" ] = \"THERE IS NO DATA HERER\" } } }","title":"Extracting data from Integrated Dynamics"},{"location":"UnlimitedPeripheralWorks/integrations/integrated_dynamics/#sending-data-to-integrated-dynamics-network","text":"Warning This logic works only for UnlimitedPeripheralWorks 1.4.3 and less. Integration also provides a specific aspect for Machine Reader, called \"Directory inside computer\". This output has an NBT type and will read data from any file inside \"/integrateddynamics\" folder in the target computer and return it to the ID network as an NBT. All files should be utf-8 encoded. Example output { \"file_name_1\" : \"file_content_1\" , \"file_name_2\" : \"file_content_2\" }","title":"Sending data to Integrated Dynamics network"},{"location":"UnlimitedPeripheralWorks/integrations/modern_industrialization/","text":"Modern Industrialization \u00b6 Modern Industrialization is a standalone tech mod, where the unltimate objective is TOTAL AUTOMATION, and with help of this ComputerCraft integration you will be able to achive it more quicky! Supported versions Fabric : 1.18, 1.19.2, 1.20.x Enegry integration \u00b6 So, every block, that can hold energy in MI now will provide energy_storage peripheral. Take a note, that values returned by this peripheral are using EU. Crafting machine peripheral \u00b6 For crafting machines, such as furnaces, you will be able to review recipe progress as well as overclocking stats. Peripheral methods \u00b6 Function Returns Description isBusy() boolean Returns true if machine is now active getCraftingInformation() table Returns detailed information about crafting process","title":"Modern Industrialization"},{"location":"UnlimitedPeripheralWorks/integrations/modern_industrialization/#modern-industrialization","text":"Modern Industrialization is a standalone tech mod, where the unltimate objective is TOTAL AUTOMATION, and with help of this ComputerCraft integration you will be able to achive it more quicky! Supported versions Fabric : 1.18, 1.19.2, 1.20.x","title":"Modern Industrialization"},{"location":"UnlimitedPeripheralWorks/integrations/modern_industrialization/#enegry-integration","text":"So, every block, that can hold energy in MI now will provide energy_storage peripheral. Take a note, that values returned by this peripheral are using EU.","title":"Enegry integration"},{"location":"UnlimitedPeripheralWorks/integrations/modern_industrialization/#crafting-machine-peripheral","text":"For crafting machines, such as furnaces, you will be able to review recipe progress as well as overclocking stats.","title":"Crafting machine peripheral"},{"location":"UnlimitedPeripheralWorks/integrations/modern_industrialization/#peripheral-methods","text":"Function Returns Description isBusy() boolean Returns true if machine is now active getCraftingInformation() table Returns detailed information about crafting process","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/integrations/natures_compass/","text":"Nature's Compass \u00b6 With this integration, you can use Nature's Compass as an upgrade for turtle and pocket computers! Supported versions Fabric : 1.19.4, 1.20.x Forge : 1.19.4, 1.20.x Peripheral methods \u00b6 Function Returns Description getBiomes() table Returns a list of biomes IDs available to search in this dimension scheduleSearch(biome: string) Result Tries to run search for specific biome id. Will fail if another search is not finished yet getState() string Returns current search state, which can be one of INACTIVE, SEARCHING, FOUND, NOT_FOUND getResult() table Returns information about found biome or nil, if no biome found Note The result of the search is position and facing dependent as in Scan API . You don't need to re-run the search after changing position or facing, coordinates will update automatically on the next getResult() function call. getResult() output example { \"x\" : 12 , \"z\" : 0 , \"distance\" : 12 , \"biome\" : \"minecraft:badlands\" }","title":"Nature's Compass"},{"location":"UnlimitedPeripheralWorks/integrations/natures_compass/#natures-compass","text":"With this integration, you can use Nature's Compass as an upgrade for turtle and pocket computers! Supported versions Fabric : 1.19.4, 1.20.x Forge : 1.19.4, 1.20.x","title":"Nature's Compass"},{"location":"UnlimitedPeripheralWorks/integrations/natures_compass/#peripheral-methods","text":"Function Returns Description getBiomes() table Returns a list of biomes IDs available to search in this dimension scheduleSearch(biome: string) Result Tries to run search for specific biome id. Will fail if another search is not finished yet getState() string Returns current search state, which can be one of INACTIVE, SEARCHING, FOUND, NOT_FOUND getResult() table Returns information about found biome or nil, if no biome found Note The result of the search is position and facing dependent as in Scan API . You don't need to re-run the search after changing position or facing, coordinates will update automatically on the next getResult() function call. getResult() output example { \"x\" : 12 , \"z\" : 0 , \"distance\" : 12 , \"biome\" : \"minecraft:badlands\" }","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/integrations/occultism/","text":"Occultism \u00b6 Occultism is a Minecraft magic mod built around summoning demons and interacting with them. Supported versions Forge : 1.19.4, 1.20.x Occultism Storage \u00b6 With this integration, occultism storage will provide Item Storage API with a few extra methods Peripheral methods \u00b6 Function Returns Description getMaxSlots() number Returns max slots in storage getUsedSlots() number Returns used slots in storage isBlacklisted(item: string) boolean Returns true if the item is blacklisted in storage, false otherwise Golden sacrificial bowl \u00b6 Unfortunately, for now, automation of occultism rituals is not supported, but when using a golden sacrificial bowl as a peripheral you can observe the flow of ritual Peripheral methods \u00b6 Function Returns Description isBusy() boolean Returns true if ritual in progress getCraftingInformation() table or nil Returns information about the current ritual if there is one in progress, nil otherwise","title":"Occultism"},{"location":"UnlimitedPeripheralWorks/integrations/occultism/#occultism","text":"Occultism is a Minecraft magic mod built around summoning demons and interacting with them. Supported versions Forge : 1.19.4, 1.20.x","title":"Occultism"},{"location":"UnlimitedPeripheralWorks/integrations/occultism/#occultism-storage","text":"With this integration, occultism storage will provide Item Storage API with a few extra methods","title":"Occultism Storage"},{"location":"UnlimitedPeripheralWorks/integrations/occultism/#peripheral-methods","text":"Function Returns Description getMaxSlots() number Returns max slots in storage getUsedSlots() number Returns used slots in storage isBlacklisted(item: string) boolean Returns true if the item is blacklisted in storage, false otherwise","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/integrations/occultism/#golden-sacrificial-bowl","text":"Unfortunately, for now, automation of occultism rituals is not supported, but when using a golden sacrificial bowl as a peripheral you can observe the flow of ritual","title":"Golden sacrificial bowl"},{"location":"UnlimitedPeripheralWorks/integrations/occultism/#peripheral-methods_1","text":"Function Returns Description isBusy() boolean Returns true if ritual in progress getCraftingInformation() table or nil Returns information about the current ritual if there is one in progress, nil otherwise","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/integrations/team_reborn_energy/","text":"TeamReborn: Energy \u00b6 If teamreborn energy is present, several useful integrations will be loaded: Any block, that provides teamreborn energy will provide energy_storage peripheral Turtles can be refueled by any item, that contains energy. By default, 50 points of energy is 1 turtle fuel point. Supported versions Fabric : 1.18, 1.19.2, 1.19.4, 1.20.x","title":"TeamReborn: Energy"},{"location":"UnlimitedPeripheralWorks/integrations/team_reborn_energy/#teamreborn-energy","text":"If teamreborn energy is present, several useful integrations will be loaded: Any block, that provides teamreborn energy will provide energy_storage peripheral Turtles can be refueled by any item, that contains energy. By default, 50 points of energy is 1 turtle fuel point. Supported versions Fabric : 1.18, 1.19.2, 1.19.4, 1.20.x","title":"TeamReborn: Energy"},{"location":"UnlimitedPeripheralWorks/integrations/toms_storage/","text":"Tom's Simple Storage \u00b6 Picture Supported versions Fabric : 1.19.4, 1.20.x Forge : 1.19.4, 1.20.x Integration with Tom's Simple storage is pretty straitforward, Inventory Connector block will provide Item Storage API","title":"Tom's Simple Storage"},{"location":"UnlimitedPeripheralWorks/integrations/toms_storage/#toms-simple-storage","text":"Picture Supported versions Fabric : 1.19.4, 1.20.x Forge : 1.19.4, 1.20.x Integration with Tom's Simple storage is pretty straitforward, Inventory Connector block will provide Item Storage API","title":"Tom's Simple Storage"},{"location":"UnlimitedPeripheralWorks/integrations/universal_shops/","text":"Unversal shops \u00b6 Picture Supported versions Fabric : 1.20.x Unversal shops is a Fabric (and Quilt compatible) trade shop mod designed to be flexible and usable in many types of servers. It works purely server side (still works on singleplayer), so it can work on your vanilla client compatible or modpack based servers. It includes craftable, Trade Shop block for players and Admin Trade Shop for admins/map makers. Integration allow you to fully configure your shop and also extract or insert items into this. Supported APIs \u00b6 inventory API Peripheral methods \u00b6 Function Returns Description getHologramMode() string Returns current hologram mode setHologramMode(value: string) nil Tries to set hologram mode, possible options are full, icon and disabled getPrice() table Returns information about current price mode with configuration if present getStock() table Returns information about current stock mode with configuration if present setPrice(mode: string, stack?: ItemStack ) Result Tries to set price mode. It can be free or single_item. For single_item it is required to pass stack argument setStock(mode: string, stack?: ItemStack ) Result Tries to set sto mode. It can be selected_item or single_item. For single_item it is required to pass stack argument","title":"Unversal shops"},{"location":"UnlimitedPeripheralWorks/integrations/universal_shops/#unversal-shops","text":"Picture Supported versions Fabric : 1.20.x Unversal shops is a Fabric (and Quilt compatible) trade shop mod designed to be flexible and usable in many types of servers. It works purely server side (still works on singleplayer), so it can work on your vanilla client compatible or modpack based servers. It includes craftable, Trade Shop block for players and Admin Trade Shop for admins/map makers. Integration allow you to fully configure your shop and also extract or insert items into this.","title":"Unversal shops"},{"location":"UnlimitedPeripheralWorks/integrations/universal_shops/#supported-apis","text":"inventory API","title":"Supported APIs"},{"location":"UnlimitedPeripheralWorks/integrations/universal_shops/#peripheral-methods","text":"Function Returns Description getHologramMode() string Returns current hologram mode setHologramMode(value: string) nil Tries to set hologram mode, possible options are full, icon and disabled getPrice() table Returns information about current price mode with configuration if present getStock() table Returns information about current stock mode with configuration if present setPrice(mode: string, stack?: ItemStack ) Result Tries to set price mode. It can be free or single_item. For single_item it is required to pass stack argument setStock(mode: string, stack?: ItemStack ) Result Tries to set sto mode. It can be selected_item or single_item. For single_item it is required to pass stack argument","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/integrations/create/actuators/","text":"Actuators \u00b6 Picture Supported versions Fabric : 1.20.x Forge : 1.20.x Actuators, such as rope pulleys, also have an extra method, that allows you to understand their speed and if they are running. Peripheral methods \u00b6 Function Returns Description inspect() table Returns table with movementSpeed and isRunning information","title":"Actuators"},{"location":"UnlimitedPeripheralWorks/integrations/create/actuators/#actuators","text":"Picture Supported versions Fabric : 1.20.x Forge : 1.20.x Actuators, such as rope pulleys, also have an extra method, that allows you to understand their speed and if they are running.","title":"Actuators"},{"location":"UnlimitedPeripheralWorks/integrations/create/actuators/#peripheral-methods","text":"Function Returns Description inspect() table Returns table with movementSpeed and isRunning information","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/integrations/create/blaze_burner/","text":"Blaze burner \u00b6 Picture Supported versions Fabric : 1.20.x Forge : 1.20.x Special intergration for blaze burner! Not much, but you can check fuel type and how long it would burn. fuelType can be \"none\", \"normal\" or \"special\" and remainingBurnTime is time left to burn in server ticks, not seconds. Peripheral methods \u00b6 Function Returns Description inspect() table Returns table with fuelType and remainingBurnTime values","title":"Blaze burner"},{"location":"UnlimitedPeripheralWorks/integrations/create/blaze_burner/#blaze-burner","text":"Picture Supported versions Fabric : 1.20.x Forge : 1.20.x Special intergration for blaze burner! Not much, but you can check fuel type and how long it would burn. fuelType can be \"none\", \"normal\" or \"special\" and remainingBurnTime is time left to burn in server ticks, not seconds.","title":"Blaze burner"},{"location":"UnlimitedPeripheralWorks/integrations/create/blaze_burner/#peripheral-methods","text":"Function Returns Description inspect() table Returns table with fuelType and remainingBurnTime values","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/integrations/create/filters/","text":"Filters \u00b6 Picture Supported versions Fabric : 1.20.x Forge : 1.20.x This integration works with most blocks in Create that have a filter component, and it allows you to manipulate this filter from the computer. Peripheral methods \u00b6 Function Returns Description getFilterName() string Returns item ID of current filter setFilterName(itemID: string) void Set filter to itemID. Would throw exception in case of incorrect itemID clearFilterItem() void Clear any filtering","title":"Filters"},{"location":"UnlimitedPeripheralWorks/integrations/create/filters/#filters","text":"Picture Supported versions Fabric : 1.20.x Forge : 1.20.x This integration works with most blocks in Create that have a filter component, and it allows you to manipulate this filter from the computer.","title":"Filters"},{"location":"UnlimitedPeripheralWorks/integrations/create/filters/#peripheral-methods","text":"Function Returns Description getFilterName() string Returns item ID of current filter setFilterName(itemID: string) void Set filter to itemID. Would throw exception in case of incorrect itemID clearFilterItem() void Clear any filtering","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/integrations/create/scrolling/","text":"Scrolling \u00b6 Picture Supported versions Fabric : 1.20.x Forge : 1.20.x This integration works with most blocks in Create that have a scrolling value setting, and it allows you to manipulate this setting from the computer. While it is a number, it also works for a lot of mod switch logic, like one with a hose pulley, because these options are also encoded like 0, 1, and 2. Peripheral methods \u00b6 Function Returns Description getScrollValue() number Returns current value of setting setScrollValue(value: number) void Set a value to the scrolling option. If the value is too high or too low, the maximum or minimum option would be used instead.","title":"Scrolling"},{"location":"UnlimitedPeripheralWorks/integrations/create/scrolling/#scrolling","text":"Picture Supported versions Fabric : 1.20.x Forge : 1.20.x This integration works with most blocks in Create that have a scrolling value setting, and it allows you to manipulate this setting from the computer. While it is a number, it also works for a lot of mod switch logic, like one with a hose pulley, because these options are also encoded like 0, 1, and 2.","title":"Scrolling"},{"location":"UnlimitedPeripheralWorks/integrations/create/scrolling/#peripheral-methods","text":"Function Returns Description getScrollValue() number Returns current value of setting setScrollValue(value: number) void Set a value to the scrolling option. If the value is too high or too low, the maximum or minimum option would be used instead.","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/integrations/minecraft/beacon/","text":"Beacon \u00b6 Picture If you ever wants to control beacon automatically and change it powers, now you can! Beacon configuration \u00b6 Beacon configuration can be complicated at first, but you need to think about it like regular beacon configuration: You select one of primary powers with power argument (should be effect id, like minecraft:haste , full list you can get via getPossiblePowers() ) Than you need to selected inventory with payment for beacon reconfiguration. By default, this method will take first item in this inventory with minecraft:beacon_payment_items tag, but you can specify exact item ID (like minecraft:iron_ingot ) via optional item parameter. If your beacon has 4 level, by default selected effect will get second level. If you want to select regeneration instead, pass regeneration as true. Compitablity note 1.18 and 1.19.2 versions of UnlimitedPeripheralWorks uses effect.minecraft.haste as ID for effects Peripheral methods \u00b6 Function Returns Description getLevel() number Returns current beacon level, can be from 1 to 4 getPossiblePowers() table Returns list of possible primary effects, that can selected getPowers() table Returns list of currently active effects configure(power: string, from: string, itemQuery?: ItemQuery , regeneration?: boolean) Result Tries to configure beacon with selected power, consuming single item from from storage Warning ItemQuery scope in any case will be reduces to items with tag minecraft:beacon_payment_items","title":"Beacon"},{"location":"UnlimitedPeripheralWorks/integrations/minecraft/beacon/#beacon","text":"Picture If you ever wants to control beacon automatically and change it powers, now you can!","title":"Beacon"},{"location":"UnlimitedPeripheralWorks/integrations/minecraft/beacon/#beacon-configuration","text":"Beacon configuration can be complicated at first, but you need to think about it like regular beacon configuration: You select one of primary powers with power argument (should be effect id, like minecraft:haste , full list you can get via getPossiblePowers() ) Than you need to selected inventory with payment for beacon reconfiguration. By default, this method will take first item in this inventory with minecraft:beacon_payment_items tag, but you can specify exact item ID (like minecraft:iron_ingot ) via optional item parameter. If your beacon has 4 level, by default selected effect will get second level. If you want to select regeneration instead, pass regeneration as true. Compitablity note 1.18 and 1.19.2 versions of UnlimitedPeripheralWorks uses effect.minecraft.haste as ID for effects","title":"Beacon configuration"},{"location":"UnlimitedPeripheralWorks/integrations/minecraft/beacon/#peripheral-methods","text":"Function Returns Description getLevel() number Returns current beacon level, can be from 1 to 4 getPossiblePowers() table Returns list of possible primary effects, that can selected getPowers() table Returns list of currently active effects configure(power: string, from: string, itemQuery?: ItemQuery , regeneration?: boolean) Result Tries to configure beacon with selected power, consuming single item from from storage Warning ItemQuery scope in any case will be reduces to items with tag minecraft:beacon_payment_items","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/integrations/minecraft/jukebox/","text":"Jukebox \u00b6 Picture Pretty standart jukebox integration, that allows you to make automatic playlist. Peripheral methods \u00b6 Function Returns Description getDisc() table Returns information about stored disc or nil replay() nil Starts play disc again, error if no disc inside stop() nil Stop playing disc ejectDisc(to: string) Result Tries to move disc from jukebox to target inventory injectDisc(from: string, itemQuery?: ItemQuery ) Result Tries to move disc from target inventory to jukebox Warning ItemQuery scope in any case will be reduces to items with tag minecraft:music_discs","title":"Jukebox"},{"location":"UnlimitedPeripheralWorks/integrations/minecraft/jukebox/#jukebox","text":"Picture Pretty standart jukebox integration, that allows you to make automatic playlist.","title":"Jukebox"},{"location":"UnlimitedPeripheralWorks/integrations/minecraft/jukebox/#peripheral-methods","text":"Function Returns Description getDisc() table Returns information about stored disc or nil replay() nil Starts play disc again, error if no disc inside stop() nil Stop playing disc ejectDisc(to: string) Result Tries to move disc from jukebox to target inventory injectDisc(from: string, itemQuery?: ItemQuery ) Result Tries to move disc from target inventory to jukebox Warning ItemQuery scope in any case will be reduces to items with tag minecraft:music_discs","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/integrations/minecraft/lectern/","text":"Lectern \u00b6 Picture Some librarian often founds lectern pretty useful, but it was always a problem to write long books. Now you can do it with one little program! Peripheral methods \u00b6 Function Returns Description hasBook() boolean If lectern has book, return true, else false getPageCount() number Returns page count, error if no book on lectern getActivePage() number Returns active page for book on lectern, error if no book on lectern setActivePage(page: number) nil Tries to set new active page for lectern. Error if no book or page number not between 1 and pageCount getText() table Returns a list of strings with text in book isBookEditable() boolean Returns true if book can be edited via this API addPage(text?: string) boolean Tries to add new page with text if passed (or empty text). Error if no book or book is not editable removePage(page: number) boolean Tries to remove existed page. Error if no book or book is not editable or page number is not correct editPage(page: number, text: string) boolean Tries to change page text. Error if no book or book is not editable or page number is not correct ejectBook(to: string) Result Tries to move book on lectern to target storage injectBook(from: string, itemQuery?: ItemQuery ) Result Tries to move book to lectern from target storage. Will transfer first suitable book. If itemQuery provided, book will be filtered by it Warning ItemQuery scope will be limited to written or writable book in any case Events \u00b6 For any computer connected to lectern, you will receive a set of events lectern_page_changed \u00b6 When someone changed page on lectern Values \u00b6 current_page: number current page for lectern lectern_book_removed \u00b6 When book removed from lectern lectern_book_changed \u00b6 When book on lectern was placed or replaced with another book Values \u00b6 book_name: string name of new book, can be \"Book and Quill\" or something more useful player_name?: string optional name of player who changed the book","title":"Lectern"},{"location":"UnlimitedPeripheralWorks/integrations/minecraft/lectern/#lectern","text":"Picture Some librarian often founds lectern pretty useful, but it was always a problem to write long books. Now you can do it with one little program!","title":"Lectern"},{"location":"UnlimitedPeripheralWorks/integrations/minecraft/lectern/#peripheral-methods","text":"Function Returns Description hasBook() boolean If lectern has book, return true, else false getPageCount() number Returns page count, error if no book on lectern getActivePage() number Returns active page for book on lectern, error if no book on lectern setActivePage(page: number) nil Tries to set new active page for lectern. Error if no book or page number not between 1 and pageCount getText() table Returns a list of strings with text in book isBookEditable() boolean Returns true if book can be edited via this API addPage(text?: string) boolean Tries to add new page with text if passed (or empty text). Error if no book or book is not editable removePage(page: number) boolean Tries to remove existed page. Error if no book or book is not editable or page number is not correct editPage(page: number, text: string) boolean Tries to change page text. Error if no book or book is not editable or page number is not correct ejectBook(to: string) Result Tries to move book on lectern to target storage injectBook(from: string, itemQuery?: ItemQuery ) Result Tries to move book to lectern from target storage. Will transfer first suitable book. If itemQuery provided, book will be filtered by it Warning ItemQuery scope will be limited to written or writable book in any case","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/integrations/minecraft/lectern/#events","text":"For any computer connected to lectern, you will receive a set of events","title":"Events"},{"location":"UnlimitedPeripheralWorks/integrations/minecraft/lectern/#lectern_page_changed","text":"When someone changed page on lectern","title":"lectern_page_changed"},{"location":"UnlimitedPeripheralWorks/integrations/minecraft/lectern/#values","text":"current_page: number current page for lectern","title":"Values"},{"location":"UnlimitedPeripheralWorks/integrations/minecraft/lectern/#lectern_book_removed","text":"When book removed from lectern","title":"lectern_book_removed"},{"location":"UnlimitedPeripheralWorks/integrations/minecraft/lectern/#lectern_book_changed","text":"When book on lectern was placed or replaced with another book","title":"lectern_book_changed"},{"location":"UnlimitedPeripheralWorks/integrations/minecraft/lectern/#values_1","text":"book_name: string name of new book, can be \"Book and Quill\" or something more useful player_name?: string optional name of player who changed the book","title":"Values"},{"location":"UnlimitedPeripheralWorks/integrations/minecraft/noteblock/","text":"Note Block \u00b6 Picture If you even dream about building automatic ensemble, here is your building blocks! Peripheral methods \u00b6 Function Returns Description getNote() number Returns current note setNote(note: number) nil Set note to desired, note should be from 0 to 24 getInstrument() string Returns current instrument setInstrument(name: string) nil Tries to set new instrument. You can get possible instruments from here play() nil Plays note","title":"Note Block"},{"location":"UnlimitedPeripheralWorks/integrations/minecraft/noteblock/#note-block","text":"Picture If you even dream about building automatic ensemble, here is your building blocks!","title":"Note Block"},{"location":"UnlimitedPeripheralWorks/integrations/minecraft/noteblock/#peripheral-methods","text":"Function Returns Description getNote() number Returns current note setNote(note: number) nil Set note to desired, note should be from 0 to 24 getInstrument() string Returns current instrument setInstrument(name: string) nil Tries to set new instrument. You can get possible instruments from here play() nil Plays note","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/integrations/minecraft/powered_rail/","text":"Powered rail \u00b6 Picture There is a very problematic to hook up minecart with computer craft. This integration should help a lot. Finally, automatic item transferring via minecarts are possible! Info Powered rail peripheral will provide same API methods like inventory from ComputerCraft integrations for aggregated inventory of ALL minecarts on rail. So, if there is three chest minecarts on rail, inventory size() will return 81. Peripheral methods \u00b6 Function Returns Description isPowered() boolean Returns true if powered rails are enabled getMinecarts() table Returns list of minecarts pushMinecarts(reverse?: boolean) nil Pushes all minecarts in a rail forward or backward if reserve are true","title":"Powered rail"},{"location":"UnlimitedPeripheralWorks/integrations/minecraft/powered_rail/#powered-rail","text":"Picture There is a very problematic to hook up minecart with computer craft. This integration should help a lot. Finally, automatic item transferring via minecarts are possible! Info Powered rail peripheral will provide same API methods like inventory from ComputerCraft integrations for aggregated inventory of ALL minecarts on rail. So, if there is three chest minecarts on rail, inventory size() will return 81.","title":"Powered rail"},{"location":"UnlimitedPeripheralWorks/integrations/minecraft/powered_rail/#peripheral-methods","text":"Function Returns Description isPowered() boolean Returns true if powered rails are enabled getMinecarts() table Returns list of minecarts pushMinecarts(reverse?: boolean) nil Pushes all minecarts in a rail forward or backward if reserve are true","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/integrations/powah/ender_cell/","text":"Ender cell \u00b6 Picture Supported versions Fabric : 1.20.x Forge : 1.20.x Additional integration with the ender cell allows you to not only see the amount of stored energy but also provide information about the current active channel in addition to the way to switch this channel. Supported API \u00b6 energy_storage API Redstone API Peripheral methods \u00b6 Function Returns Description getEnergyTransfer() number Returns max energy transfer getChannel() number Returns current channel setChannel(channel: number) nil Change channel to new one getMaxChannel() number Returns max channel","title":"Ender cell"},{"location":"UnlimitedPeripheralWorks/integrations/powah/ender_cell/#ender-cell","text":"Picture Supported versions Fabric : 1.20.x Forge : 1.20.x Additional integration with the ender cell allows you to not only see the amount of stored energy but also provide information about the current active channel in addition to the way to switch this channel.","title":"Ender cell"},{"location":"UnlimitedPeripheralWorks/integrations/powah/ender_cell/#supported-api","text":"energy_storage API Redstone API","title":"Supported API"},{"location":"UnlimitedPeripheralWorks/integrations/powah/ender_cell/#peripheral-methods","text":"Function Returns Description getEnergyTransfer() number Returns max energy transfer getChannel() number Returns current channel setChannel(channel: number) nil Change channel to new one getMaxChannel() number Returns max channel","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/integrations/powah/generators/","text":"Generators \u00b6 Picture Supported versions Fabric : 1.20.x Forge : 1.20.x This integration works with any powah generator (aside from reactors, which have their own integration), and it allows you to inspect additional information about generators, including current energy generation. Supported API \u00b6 energy_storage API Redstone API Peripheral methods \u00b6 Function Returns Description getEnergyTransfer() number Returns max energy transfer getEnergyGeneration() number Returns current energy generation","title":"Generators"},{"location":"UnlimitedPeripheralWorks/integrations/powah/generators/#generators","text":"Picture Supported versions Fabric : 1.20.x Forge : 1.20.x This integration works with any powah generator (aside from reactors, which have their own integration), and it allows you to inspect additional information about generators, including current energy generation.","title":"Generators"},{"location":"UnlimitedPeripheralWorks/integrations/powah/generators/#supported-api","text":"energy_storage API Redstone API","title":"Supported API"},{"location":"UnlimitedPeripheralWorks/integrations/powah/generators/#peripheral-methods","text":"Function Returns Description getEnergyTransfer() number Returns max energy transfer getEnergyGeneration() number Returns current energy generation","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/integrations/powah/powah_redstone_api/","text":"Since Powah supports configuration of many blocks with specific redstone mode, this API exists to allow you to modify this mode programatically. API methods \u00b6 Function Returns Description getRedstoneMode() string Returns current redstone mode setRedstoneMode(mode: string) nil Setter for redstone mode, mode should be one of: ignore, on or off","title":"Powah redstone api"},{"location":"UnlimitedPeripheralWorks/integrations/powah/powah_redstone_api/#api-methods","text":"Function Returns Description getRedstoneMode() string Returns current redstone mode setRedstoneMode(mode: string) nil Setter for redstone mode, mode should be one of: ignore, on or off","title":"API methods"},{"location":"UnlimitedPeripheralWorks/integrations/powah/reactor/","text":"Reactor \u00b6 Picture Supported versions Fabric : 1.20.x Forge : 1.20.x Reactors in powah are a bit special, and because of this, they have their own special integration. Take note that this integration will only work for fully built reactor. Supported API \u00b6 energy_storage API Redstone API Peripheral methods \u00b6 Function Returns Description getEnergyTransfer() number Returns max energy transfer getEnergyGeneration() number Returns current energy generation inspect() table Returns all information about generator, including amount of fuel, carbon, redstone as well as some consumption metrics and temperature toggleAutoMode() nil Toggles auto mode of reactor Example of inspect output { \"autoMode\" : false , \"currentCarbon\" : 0 , \"maxCarbon\" : 16000 , \"currentRedstone\" : 0 , \"maxRedstone\" : 18 , \"currentUranium\" : 0 , \"maxUranium\" : 1000 , \"maxSolidCoolant\" : 568 , \"currentSolidCoolant\" : 0 , \"currentTemp\" : 1000 , \"maxTemp\" : 1000 , \"energyProduction\" : 0 , \"uraniumConsumption\" : 0 }","title":"Reactor"},{"location":"UnlimitedPeripheralWorks/integrations/powah/reactor/#reactor","text":"Picture Supported versions Fabric : 1.20.x Forge : 1.20.x Reactors in powah are a bit special, and because of this, they have their own special integration. Take note that this integration will only work for fully built reactor.","title":"Reactor"},{"location":"UnlimitedPeripheralWorks/integrations/powah/reactor/#supported-api","text":"energy_storage API Redstone API","title":"Supported API"},{"location":"UnlimitedPeripheralWorks/integrations/powah/reactor/#peripheral-methods","text":"Function Returns Description getEnergyTransfer() number Returns max energy transfer getEnergyGeneration() number Returns current energy generation inspect() table Returns all information about generator, including amount of fuel, carbon, redstone as well as some consumption metrics and temperature toggleAutoMode() nil Toggles auto mode of reactor Example of inspect output { \"autoMode\" : false , \"currentCarbon\" : 0 , \"maxCarbon\" : 16000 , \"currentRedstone\" : 0 , \"maxRedstone\" : 18 , \"currentUranium\" : 0 , \"maxUranium\" : 1000 , \"maxSolidCoolant\" : 568 , \"currentSolidCoolant\" : 0 , \"currentTemp\" : 1000 , \"maxTemp\" : 1000 , \"energyProduction\" : 0 , \"uraniumConsumption\" : 0 }","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/items/entity_card/","text":"Entity card \u00b6 Picture Supported versions Forge : 1.20.x Fabric : 1.20.x Card, that can be linked to any entity (not only living one). For example, it can be linked to a minecart. Just right click at entity to try to store it. Use crafting table to clean stored entity. Exists to configure Entity link","title":"Entity card"},{"location":"UnlimitedPeripheralWorks/items/entity_card/#entity-card","text":"Picture Supported versions Forge : 1.20.x Fabric : 1.20.x Card, that can be linked to any entity (not only living one). For example, it can be linked to a minecart. Just right click at entity to try to store it. Use crafting table to clean stored entity. Exists to configure Entity link","title":"Entity card"},{"location":"UnlimitedPeripheralWorks/items/ultimate_configurator/","text":"Ultimate configurator \u00b6 Picture Supported versions Forge : 1.19.4, 1.20.x Fabric : 1.19.4, 1.20.x Tool, that allows you to configure peripherals from this mod. List of integration: - Remote observer - Peripheral proxy Using configurator is pretty easy task: Crouching right click on block to start configuring it. With active configuration mode crouching right click on another blocks to connect/disconnect them Crouching right click on air to reset configuration mode","title":"Ultimate configurator"},{"location":"UnlimitedPeripheralWorks/items/ultimate_configurator/#ultimate-configurator","text":"Picture Supported versions Forge : 1.19.4, 1.20.x Fabric : 1.19.4, 1.20.x Tool, that allows you to configure peripherals from this mod. List of integration: - Remote observer - Peripheral proxy Using configurator is pretty easy task: Crouching right click on block to start configuring it. With active configuration mode crouching right click on another blocks to connect/disconnect them Crouching right click on air to reset configuration mode","title":"Ultimate configurator"},{"location":"UnlimitedPeripheralWorks/legacy_integrations/lifts/","text":"Lifts \u00b6 Lifts a technology mod that adds various lifts for better vertical traversal inside your world. This integration allows you to control lift and moves it via CC computers. Any lift controller will provide such capabilities to you Supported versions Fabric : Only 1.18 Peripheral methods \u00b6 Function Returns Description floors() table Returns list of floors with information about related controllers getCurrentFloor() Result [number] Get current floor index getFloorName(floor: number) string Get floor name, how it will be displayed on lift controller hud changeFloor(floor: number) Result Tries to send lift to selected floor","title":"Lifts"},{"location":"UnlimitedPeripheralWorks/legacy_integrations/lifts/#lifts","text":"Lifts a technology mod that adds various lifts for better vertical traversal inside your world. This integration allows you to control lift and moves it via CC computers. Any lift controller will provide such capabilities to you Supported versions Fabric : Only 1.18","title":"Lifts"},{"location":"UnlimitedPeripheralWorks/legacy_integrations/lifts/#peripheral-methods","text":"Function Returns Description floors() table Returns list of floors with information about related controllers getCurrentFloor() Result [number] Get current floor index getFloorName(floor: number) string Get floor name, how it will be displayed on lift controller hud changeFloor(floor: number) Result Tries to send lift to selected floor","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/peripherals/display_pedestal/","text":"Display pedestal \u00b6 Picture Supported versions Forge : 1.19.4, 1.20.x Fabric : 1.19.4, 1.20.x This pedestal can display anything. Like, literally any item in the game. It is such a pity, that you can't take this item, because this is just a visualization. To compensate this disturbing filling of lost opportunities, this pedestal will also fire events when someone click on it with left or right mouse button. Peripheral methods \u00b6 Function Returns Description getItem() table Returns information about current displayed item setItem(id: string, name?: string, nbt?: string) Result Tries to set new item to display. NBT should be json string, see example below isLabelRendered() boolean Returns true if label should be renderer, false otherwise isItemRendered() boolean Returns true if item should be renderer, false otherwise setLabelRendered(value: boolean) nil Allows to change is label should be rendered to not setItemRendered(value: boolean) nil Allows to change is item should be rendered to not How in hell does nbt works? NBT data passing from ComputerCraft to Minecraft are ... complicated task. So currently, nbt are just string that expected to be minecraft NBT data serialized into json. You can try setItem(\"minecraft:potion\", nil, \"{Potion:\\\"minecraft:long_regeneration\\\"}\") to understand how it works Events \u00b6 For any computer connected to display pedestal, you will receive a set of events pedestal_left_click \u00b6 When some player clicked on pedestal with left click Values \u00b6 itemInHand: table item in player hand pedestal_right_click \u00b6 When some player clicked on pedestal with right click Values \u00b6 itemInHand: table item in player hand","title":"Display pedestal"},{"location":"UnlimitedPeripheralWorks/peripherals/display_pedestal/#display-pedestal","text":"Picture Supported versions Forge : 1.19.4, 1.20.x Fabric : 1.19.4, 1.20.x This pedestal can display anything. Like, literally any item in the game. It is such a pity, that you can't take this item, because this is just a visualization. To compensate this disturbing filling of lost opportunities, this pedestal will also fire events when someone click on it with left or right mouse button.","title":"Display pedestal"},{"location":"UnlimitedPeripheralWorks/peripherals/display_pedestal/#peripheral-methods","text":"Function Returns Description getItem() table Returns information about current displayed item setItem(id: string, name?: string, nbt?: string) Result Tries to set new item to display. NBT should be json string, see example below isLabelRendered() boolean Returns true if label should be renderer, false otherwise isItemRendered() boolean Returns true if item should be renderer, false otherwise setLabelRendered(value: boolean) nil Allows to change is label should be rendered to not setItemRendered(value: boolean) nil Allows to change is item should be rendered to not How in hell does nbt works? NBT data passing from ComputerCraft to Minecraft are ... complicated task. So currently, nbt are just string that expected to be minecraft NBT data serialized into json. You can try setItem(\"minecraft:potion\", nil, \"{Potion:\\\"minecraft:long_regeneration\\\"}\") to understand how it works","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/peripherals/display_pedestal/#events","text":"For any computer connected to display pedestal, you will receive a set of events","title":"Events"},{"location":"UnlimitedPeripheralWorks/peripherals/display_pedestal/#pedestal_left_click","text":"When some player clicked on pedestal with left click","title":"pedestal_left_click"},{"location":"UnlimitedPeripheralWorks/peripherals/display_pedestal/#values","text":"itemInHand: table item in player hand","title":"Values"},{"location":"UnlimitedPeripheralWorks/peripherals/display_pedestal/#pedestal_right_click","text":"When some player clicked on pedestal with right click","title":"pedestal_right_click"},{"location":"UnlimitedPeripheralWorks/peripherals/display_pedestal/#values_1","text":"itemInHand: table item in player hand","title":"Values"},{"location":"UnlimitedPeripheralWorks/peripherals/entity_link/","text":"Entity link \u00b6 Picture Supported versions Forge : 1.20.x Fabric : 1.20.x ComputerCraft is a powerful tool that allows you to manipulate different blocks and modify them. Hey, but what about entities, like minecart or even living creatures like horses with chests? Why they should be left behind? Not anymore. With the help of an entity link and entity card , you can connect your computer to supported entities! Just insert entity card into it with right click. If you want to remove card from link, just right click on it with empty hand. List of supported entities: Minecarts with chest or with furnace would additionally provide inventory API to this minecart. Horses, donkeys and llamas with chests would additionally provide inventory API. Demons from Occultism if they have inventory would additionally provide inventory API. Peripheral functions \u00b6 Function Returns Description isEntityFound() bool Returns true if entity connected, false if not inspect() table or nil Returns table description of entity if it is attached, nil if entity is not found","title":"Entity link"},{"location":"UnlimitedPeripheralWorks/peripherals/entity_link/#entity-link","text":"Picture Supported versions Forge : 1.20.x Fabric : 1.20.x ComputerCraft is a powerful tool that allows you to manipulate different blocks and modify them. Hey, but what about entities, like minecart or even living creatures like horses with chests? Why they should be left behind? Not anymore. With the help of an entity link and entity card , you can connect your computer to supported entities! Just insert entity card into it with right click. If you want to remove card from link, just right click on it with empty hand. List of supported entities: Minecarts with chest or with furnace would additionally provide inventory API to this minecart. Horses, donkeys and llamas with chests would additionally provide inventory API. Demons from Occultism if they have inventory would additionally provide inventory API.","title":"Entity link"},{"location":"UnlimitedPeripheralWorks/peripherals/entity_link/#peripheral-functions","text":"Function Returns Description isEntityFound() bool Returns true if entity connected, false if not inspect() table or nil Returns table description of entity if it is attached, nil if entity is not found","title":"Peripheral functions"},{"location":"UnlimitedPeripheralWorks/peripherals/informative_registry/","text":"Informative registry \u00b6 Picture Supported versions Forge : 1.20.x Fabric : 1.20.x Ever wonder how many blocks or items exist on a server with so many mods? Now you can access them all. This peripheral allows you to access this information and game and probably do something interesting with it. Peripheral functions \u00b6 Function Returns Description list(\"item\") table Returns list of all possible item IDs list(\"block\") table Returns lists of all possible block IDs list(\"fluid\") table Returns lists of all possible fluid IDs list(\"list\") table Returns lists of all possible list IDs describe(\"item\", itemID: string) table Returns detailed information about items describe(\"block\", blockID: string) table Returns detailed information about block describe(\"fluid \", fluidID: string) table Returns detailed information about fluid describe(\"list\", listID: string) string Returns text description of specific list","title":"Informative registry"},{"location":"UnlimitedPeripheralWorks/peripherals/informative_registry/#informative-registry","text":"Picture Supported versions Forge : 1.20.x Fabric : 1.20.x Ever wonder how many blocks or items exist on a server with so many mods? Now you can access them all. This peripheral allows you to access this information and game and probably do something interesting with it.","title":"Informative registry"},{"location":"UnlimitedPeripheralWorks/peripherals/informative_registry/#peripheral-functions","text":"Function Returns Description list(\"item\") table Returns list of all possible item IDs list(\"block\") table Returns lists of all possible block IDs list(\"fluid\") table Returns lists of all possible fluid IDs list(\"list\") table Returns lists of all possible list IDs describe(\"item\", itemID: string) table Returns detailed information about items describe(\"block\", blockID: string) table Returns detailed information about block describe(\"fluid \", fluidID: string) table Returns detailed information about fluid describe(\"list\", listID: string) string Returns text description of specific list","title":"Peripheral functions"},{"location":"UnlimitedPeripheralWorks/peripherals/item_pedestal/","text":"Item pedestal \u00b6 Picture Supported versions Forge : 1.19.4, 1.20.x Fabric : 1.19.4, 1.20.x Who doesn't want a nice, cute little pedestal, that can be used to store and display items? Well, now you have one. But this peripheral also allows you to inspect item NBT data, when item is placed on this pedestal. Place items with right click, and retrieve items with left click with empty hand. Supported APIs \u00b6 inventory API from CC:T. With only difference, that getItemDetail returns also rawNBT table value.","title":"Item pedestal"},{"location":"UnlimitedPeripheralWorks/peripherals/item_pedestal/#item-pedestal","text":"Picture Supported versions Forge : 1.19.4, 1.20.x Fabric : 1.19.4, 1.20.x Who doesn't want a nice, cute little pedestal, that can be used to store and display items? Well, now you have one. But this peripheral also allows you to inspect item NBT data, when item is placed on this pedestal. Place items with right click, and retrieve items with left click with empty hand.","title":"Item pedestal"},{"location":"UnlimitedPeripheralWorks/peripherals/item_pedestal/#supported-apis","text":"inventory API from CC:T. With only difference, that getItemDetail returns also rawNBT table value.","title":"Supported APIs"},{"location":"UnlimitedPeripheralWorks/peripherals/map_pedestal/","text":"Map pedestal \u00b6 Picture Supported versions Forge : 1.19.4, 1.20.x Fabric : 1.19.4, 1.20.x One cute pedestal is nice, but two cute pedestals is much better. In additionally to being cute, this pedestal allows you to get information from minecraft maps and even update them time to time. And because of this, only maps can be placed on this pedestal. Place map with right click, and retrieve map back with left click with empty hand. Supported APIs \u00b6 inventory API from CC:T. With only difference, that getItemDetail returns also rawNBT table value. Configuration API Operation API Peripheral methods \u00b6 Function Returns Description getData() Result [table] Returns table with extracted information from map, including colors, scale and banners updateData() Result Tries to update information on map","title":"Map pedestal"},{"location":"UnlimitedPeripheralWorks/peripherals/map_pedestal/#map-pedestal","text":"Picture Supported versions Forge : 1.19.4, 1.20.x Fabric : 1.19.4, 1.20.x One cute pedestal is nice, but two cute pedestals is much better. In additionally to being cute, this pedestal allows you to get information from minecraft maps and even update them time to time. And because of this, only maps can be placed on this pedestal. Place map with right click, and retrieve map back with left click with empty hand.","title":"Map pedestal"},{"location":"UnlimitedPeripheralWorks/peripherals/map_pedestal/#supported-apis","text":"inventory API from CC:T. With only difference, that getItemDetail returns also rawNBT table value. Configuration API Operation API","title":"Supported APIs"},{"location":"UnlimitedPeripheralWorks/peripherals/map_pedestal/#peripheral-methods","text":"Function Returns Description getData() Result [table] Returns table with extracted information from map, including colors, scale and banners updateData() Result Tries to update information on map","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/peripherals/peripheral_proxy/","text":"Peripheral proxy \u00b6 Picture Supported versions Forge : 1.19.4, 1.20.x Fabric : 1.19.4, 1.20.x Cables seems a little obsolete now, in real world you can freely use wireless transfer (even for energy and items), why this shouldn't work in Minecraft? So, here is goes peripheral proxy, nice tool to connect remote peripherals to the computer without actual wires. Sadly it has limited range, but how is ideal today? How to configure \u00b6 To configure peripheral proxy, you can use ultimate configurator . Supported APIs \u00b6 peripheral_hub api for CC:T, so this upgrade actually work as modem and provide access to peripherals inside it.","title":"Peripheral proxy"},{"location":"UnlimitedPeripheralWorks/peripherals/peripheral_proxy/#peripheral-proxy","text":"Picture Supported versions Forge : 1.19.4, 1.20.x Fabric : 1.19.4, 1.20.x Cables seems a little obsolete now, in real world you can freely use wireless transfer (even for energy and items), why this shouldn't work in Minecraft? So, here is goes peripheral proxy, nice tool to connect remote peripherals to the computer without actual wires. Sadly it has limited range, but how is ideal today?","title":"Peripheral proxy"},{"location":"UnlimitedPeripheralWorks/peripherals/peripheral_proxy/#how-to-configure","text":"To configure peripheral proxy, you can use ultimate configurator .","title":"How to configure"},{"location":"UnlimitedPeripheralWorks/peripherals/peripheral_proxy/#supported-apis","text":"peripheral_hub api for CC:T, so this upgrade actually work as modem and provide access to peripherals inside it.","title":"Supported APIs"},{"location":"UnlimitedPeripheralWorks/peripherals/peripheralium_hub/","text":"Peripheralium hub \u00b6 Picture Supported versions Forge : 1.19.4, 1.20.x Fabric : 1.19.4, 1.20.x Warning Prior to 1.0.0 version, due to ComputerCraft limitations, all equipped upgrades will be deleted if you brake turtle or remove peripheralium hub without unequipping upgrades Turtle limited to two upgrade slots and pocket computers to one. With all this nasty new add-ons to CC:T it sometimes becomes a pain to select what upgrade you want to install. But with this hub, you can install all of them! Nah, unfortunately, only 3 for base version and 7 for netherite one, but this is still something. And of course, both turtles and pocket computers are supported! Supported APIs \u00b6 Configuration API peripheral_hub api for CC:T, so this upgrade actually work as modem and provide access to peripherals inside it. Peripheral methods \u00b6 Function Returns Description isUpgrade(slot: number) boolean Returns true if item in slot can be used as upgrade, false otherwise equip(slot: number) Result Tries to equip item in slot as an upgrade. unequip(id: string) Result Tries to unequip upgrade to inventory. If inventory is full, an upgrade item will be dropped on the ground getUpgrades() table Returns ids of all equipped upgrades","title":"Peripheralium hub"},{"location":"UnlimitedPeripheralWorks/peripherals/peripheralium_hub/#peripheralium-hub","text":"Picture Supported versions Forge : 1.19.4, 1.20.x Fabric : 1.19.4, 1.20.x Warning Prior to 1.0.0 version, due to ComputerCraft limitations, all equipped upgrades will be deleted if you brake turtle or remove peripheralium hub without unequipping upgrades Turtle limited to two upgrade slots and pocket computers to one. With all this nasty new add-ons to CC:T it sometimes becomes a pain to select what upgrade you want to install. But with this hub, you can install all of them! Nah, unfortunately, only 3 for base version and 7 for netherite one, but this is still something. And of course, both turtles and pocket computers are supported!","title":"Peripheralium hub"},{"location":"UnlimitedPeripheralWorks/peripherals/peripheralium_hub/#supported-apis","text":"Configuration API peripheral_hub api for CC:T, so this upgrade actually work as modem and provide access to peripherals inside it.","title":"Supported APIs"},{"location":"UnlimitedPeripheralWorks/peripherals/peripheralium_hub/#peripheral-methods","text":"Function Returns Description isUpgrade(slot: number) boolean Returns true if item in slot can be used as upgrade, false otherwise equip(slot: number) Result Tries to equip item in slot as an upgrade. unequip(id: string) Result Tries to unequip upgrade to inventory. If inventory is full, an upgrade item will be dropped on the ground getUpgrades() table Returns ids of all equipped upgrades","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/peripherals/reality_forger/","text":"Reality forger \u00b6 Picture Supported versions Forge : 1.20.x Fabric : 1.20.x Do you even want to control the appearance of your home and change it just by pressing a button? Now you can do this; just build your home from flexible reality anchors and use reality forger to control them. You can mimic nearly any block, create dynamic doors, and forge the reality that surrounds you. Peripheral methods \u00b6 Function Returns Description detectAnchors() table Returns list of all surrounding anchors with relative coordinates forgeRealityPieces(coordinates: list[ BlockPos ], blockState: BlockState , options?: Options ) Result Tries to modify the appearance of blocks in the block poses list batchForgeRealityPieces(instructions: Instructions )) Result Tries to modify the appearance of blocks following instructions in one tick forgeReality(mimic: blockState: BlockState , options?: Options ) Result Tries to modify appearance of all surrounding blocks Compitability info In previous versions (prior to 1.1.0) it was possible to pass options flags inside blockstate argument. It is still work for backward compitability, but will be removed in next major minecraft update Options \u00b6 Options is just a table with \"key\" and boolean value false or true . You can use playerPassable attribute to make blocks passable for players. So {playerPassable=true} will create an oak block that the player can just walk through. Take note that blocks will be passable only for players. You can use the boolean attributes lightPassable and skyLightPassable to allow light and skylight to pass or not throw the block. You can use the boolean attribute invisible to make blocks totally invisible. In addition to playerPassable it makes blocks nearly undetectable. Instructions \u00b6 Type descriptions: list[list[ BlockPos ], BlockState , Options ]] Because batchForgeRealityPieces is method designed to execute multiple forgeRealityPieces in one tick, batchForgeRealityPieces just accepts list of arguments for this method. So, you expected to pass something like: p . batchForgeRealityPieces ({ {{{ x = 0 , y = 0 , z = 1 }, { x = 1 , y = 1 , z = 1 }}, { block = \"minecraft:oak_log\" }}, {{{ x = 1 , y = 0 , z = 1 }}, { block = \"minecraft:birch_log\" }, { playerPassable = true }} })","title":"Reality forger"},{"location":"UnlimitedPeripheralWorks/peripherals/reality_forger/#reality-forger","text":"Picture Supported versions Forge : 1.20.x Fabric : 1.20.x Do you even want to control the appearance of your home and change it just by pressing a button? Now you can do this; just build your home from flexible reality anchors and use reality forger to control them. You can mimic nearly any block, create dynamic doors, and forge the reality that surrounds you.","title":"Reality forger"},{"location":"UnlimitedPeripheralWorks/peripherals/reality_forger/#peripheral-methods","text":"Function Returns Description detectAnchors() table Returns list of all surrounding anchors with relative coordinates forgeRealityPieces(coordinates: list[ BlockPos ], blockState: BlockState , options?: Options ) Result Tries to modify the appearance of blocks in the block poses list batchForgeRealityPieces(instructions: Instructions )) Result Tries to modify the appearance of blocks following instructions in one tick forgeReality(mimic: blockState: BlockState , options?: Options ) Result Tries to modify appearance of all surrounding blocks Compitability info In previous versions (prior to 1.1.0) it was possible to pass options flags inside blockstate argument. It is still work for backward compitability, but will be removed in next major minecraft update","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/peripherals/reality_forger/#options","text":"Options is just a table with \"key\" and boolean value false or true . You can use playerPassable attribute to make blocks passable for players. So {playerPassable=true} will create an oak block that the player can just walk through. Take note that blocks will be passable only for players. You can use the boolean attributes lightPassable and skyLightPassable to allow light and skylight to pass or not throw the block. You can use the boolean attribute invisible to make blocks totally invisible. In addition to playerPassable it makes blocks nearly undetectable.","title":"Options"},{"location":"UnlimitedPeripheralWorks/peripherals/reality_forger/#instructions","text":"Type descriptions: list[list[ BlockPos ], BlockState , Options ]] Because batchForgeRealityPieces is method designed to execute multiple forgeRealityPieces in one tick, batchForgeRealityPieces just accepts list of arguments for this method. So, you expected to pass something like: p . batchForgeRealityPieces ({ {{{ x = 0 , y = 0 , z = 1 }, { x = 1 , y = 1 , z = 1 }}, { block = \"minecraft:oak_log\" }}, {{{ x = 1 , y = 0 , z = 1 }}, { block = \"minecraft:birch_log\" }, { playerPassable = true }} })","title":"Instructions"},{"location":"UnlimitedPeripheralWorks/peripherals/recipe_registry/","text":"Recipe registry \u00b6 Picture Supported versions Forge : 1.20.x Fabric : 1.20.x Warning Current peripheral has experimental status, so API can change in future Warning Due to nature of minecraft recipes, a lot of recipe from mods are not dispalyed correctly. You can create an issue for to solve this. This peripheral exists to provide help in extracting recipes from game and building complex recipe pipelines. It may not work as well as you would expect, but at least this is a start. Peripheral functions \u00b6 Function Returns Description getRecipeTypes() table Returns list of all recipe types in the game getAllRecipesForType(recipeTypeID: string) table Returns all recipes for given recipe type getRecipeForType(recipeTypeID: string, recipeID: string) table Returns information about particular recipe getRecipesFor(itemID: string, recipeFilter: RecipeFilter ) table Returns all recipe for item based on filter RecipeFilter \u00b6 RecipeFilter is a specific parameter that allows you to limit recipe types. If recipe filter is nil or * it will be interpreted as \"Everything allowed\" If recipe filter is a string that contains : it will be interpreted as \"exact this recipe type\" and recipe filter value will be used to determine type If recipe filter is a generic string, it will be interpreted as the \"Start with this script\" condition. If recipe filter is lua table, it will be interpreted as a list of possible recipe types.","title":"Recipe registry"},{"location":"UnlimitedPeripheralWorks/peripherals/recipe_registry/#recipe-registry","text":"Picture Supported versions Forge : 1.20.x Fabric : 1.20.x Warning Current peripheral has experimental status, so API can change in future Warning Due to nature of minecraft recipes, a lot of recipe from mods are not dispalyed correctly. You can create an issue for to solve this. This peripheral exists to provide help in extracting recipes from game and building complex recipe pipelines. It may not work as well as you would expect, but at least this is a start.","title":"Recipe registry"},{"location":"UnlimitedPeripheralWorks/peripherals/recipe_registry/#peripheral-functions","text":"Function Returns Description getRecipeTypes() table Returns list of all recipe types in the game getAllRecipesForType(recipeTypeID: string) table Returns all recipes for given recipe type getRecipeForType(recipeTypeID: string, recipeID: string) table Returns information about particular recipe getRecipesFor(itemID: string, recipeFilter: RecipeFilter ) table Returns all recipe for item based on filter","title":"Peripheral functions"},{"location":"UnlimitedPeripheralWorks/peripherals/recipe_registry/#recipefilter","text":"RecipeFilter is a specific parameter that allows you to limit recipe types. If recipe filter is nil or * it will be interpreted as \"Everything allowed\" If recipe filter is a string that contains : it will be interpreted as \"exact this recipe type\" and recipe filter value will be used to determine type If recipe filter is a generic string, it will be interpreted as the \"Start with this script\" condition. If recipe filter is lua table, it will be interpreted as a list of possible recipe types.","title":"RecipeFilter"},{"location":"UnlimitedPeripheralWorks/peripherals/remote_observer/","text":"Remote observer \u00b6 Picture Supported versions Forge : 1.19.4, 1.20.x Fabric : 1.19.4, 1.20.x Observer is a perfect tool for tracking remote changes. But this tools is vastly limited by position and redstone logic. Computer world shouldn't be limited with this! Remote observer allows you to observe block state changes from a small range. And it also works with up to 8 blocks (by default). How to configure \u00b6 To configure remote observer, you can use ultimate configurator or peripheral methods. Peripheral methods \u00b6 Function Returns Description addPosition(pos: BlockPos ) Result Tries to add new position to track removePosition(pos: BlockPos ) Result Tries to remove position from tracking getPositions() table Return list of all tracked positions Events \u00b6 block_change \u00b6 Fires when any observer block changes it block state (take a note, that this happens also when block is destroyed or placed) Values \u00b6 blockPos : BlockPos relative position of block, that changed oldState: table lua table with old block state newState: table lua table with new block state","title":"Remote observer"},{"location":"UnlimitedPeripheralWorks/peripherals/remote_observer/#remote-observer","text":"Picture Supported versions Forge : 1.19.4, 1.20.x Fabric : 1.19.4, 1.20.x Observer is a perfect tool for tracking remote changes. But this tools is vastly limited by position and redstone logic. Computer world shouldn't be limited with this! Remote observer allows you to observe block state changes from a small range. And it also works with up to 8 blocks (by default).","title":"Remote observer"},{"location":"UnlimitedPeripheralWorks/peripherals/remote_observer/#how-to-configure","text":"To configure remote observer, you can use ultimate configurator or peripheral methods.","title":"How to configure"},{"location":"UnlimitedPeripheralWorks/peripherals/remote_observer/#peripheral-methods","text":"Function Returns Description addPosition(pos: BlockPos ) Result Tries to add new position to track removePosition(pos: BlockPos ) Result Tries to remove position from tracking getPositions() table Return list of all tracked positions","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/peripherals/remote_observer/#events","text":"","title":"Events"},{"location":"UnlimitedPeripheralWorks/peripherals/remote_observer/#block_change","text":"Fires when any observer block changes it block state (take a note, that this happens also when block is destroyed or placed)","title":"block_change"},{"location":"UnlimitedPeripheralWorks/peripherals/remote_observer/#values","text":"blockPos : BlockPos relative position of block, that changed oldState: table lua table with old block state newState: table lua table with new block state","title":"Values"},{"location":"UnlimitedPeripheralWorks/peripherals/statue_workbench/","text":"Statue workbench \u00b6 Picture Supported versions Forge : 1.20.x Fabric : 1.20.x Minecraft consists of blocks, but blocks are not as flexible as many of us would like. But with the status workbench, you can overcome this problem! Just place a flexible statue on top of the workbench and be ready to shape any block that you want. Peripheral methods \u00b6 Function Returns Description isPresent() boolean Check if statue is present on top of workbench setStatueName(name: String) nil Setter for statue name getStatueName() string Returns statue name setAuthor(author: String) nil Setter for statue author getAuthor() string Return statue author setLightLevel(level: Int) nil Setter for light level of statue getLightLevel() Int Returns statue light level setCubes(cubes: list[ Cube ]) nil Setter for statue cubes getCubes() list[ Cube ] Returns list of current cubes for statue reset() nil Removes all information for statue and reset it Cube \u00b6 Cube is a table that describes the start and end points of a cube, its color, and its texture. Color is named tint in RGB format. Texture is basically any Minecraft texture; by default it is peripheralworks:block/white , so just white, that can be painted in anything via tint . { x1 = 0 , x2 = 14 , y1 = 0 , y2 = 14 , z1 = 0 , z2 = 14 , tint = 0xFF00FF }","title":"Statue workbench"},{"location":"UnlimitedPeripheralWorks/peripherals/statue_workbench/#statue-workbench","text":"Picture Supported versions Forge : 1.20.x Fabric : 1.20.x Minecraft consists of blocks, but blocks are not as flexible as many of us would like. But with the status workbench, you can overcome this problem! Just place a flexible statue on top of the workbench and be ready to shape any block that you want.","title":"Statue workbench"},{"location":"UnlimitedPeripheralWorks/peripherals/statue_workbench/#peripheral-methods","text":"Function Returns Description isPresent() boolean Check if statue is present on top of workbench setStatueName(name: String) nil Setter for statue name getStatueName() string Returns statue name setAuthor(author: String) nil Setter for statue author getAuthor() string Return statue author setLightLevel(level: Int) nil Setter for light level of statue getLightLevel() Int Returns statue light level setCubes(cubes: list[ Cube ]) nil Setter for statue cubes getCubes() list[ Cube ] Returns list of current cubes for statue reset() nil Removes all information for statue and reset it","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/peripherals/statue_workbench/#cube","text":"Cube is a table that describes the start and end points of a cube, its color, and its texture. Color is named tint in RGB format. Texture is basically any Minecraft texture; by default it is peripheralworks:block/white , so just white, that can be painted in anything via tint . { x1 = 0 , x2 = 14 , y1 = 0 , y2 = 14 , z1 = 0 , z2 = 14 , tint = 0xFF00FF }","title":"Cube"},{"location":"UnlimitedPeripheralWorks/peripherals/ultimate_sensor/","text":"Ultimate sensor \u00b6 Picture Supported versions Forge : 1.19.4, 1.20.x Fabric : 1.19.4, 1.20.x The end goal of the ultimate sensor is to be able to sense literally anything. But for now, its scope is somewhat limited by real world and your imagination to use it. Supported APIs \u00b6 Configuration API Operation API Peripheral methods \u00b6 Function Returns Description inspect(\"dimension\") Result [string] Returns dimension name inspect(\"biome\") Result [string] Returns biome name inspect(\"weather\") Result [string] Returns weather state: rain, thunder or stable inspect(\"orientation\") Result [number] Returns azimuth for peripheral orientation (block orientation for block, turtle facing for turtle and player orientation for pocket computer) inspect(\"time\") Result [number] Returns day time of world inspect(\"light\") Result [table] Returns information about light and sunlight of current position inspect(\"calendar\") Result [table] Returns information about current day number and moon phase inspect(\"chunk\") Result [table] Returns information about current chunk: is this is slime chunk and how many ores in this chunk analyze(\"dimension\") Result [table] Returns list of all dimension names listAnalyzers() table Returns list of all possible analyzers listInspectors() table Returns list of all possible inspectors","title":"Ultimate sensor"},{"location":"UnlimitedPeripheralWorks/peripherals/ultimate_sensor/#ultimate-sensor","text":"Picture Supported versions Forge : 1.19.4, 1.20.x Fabric : 1.19.4, 1.20.x The end goal of the ultimate sensor is to be able to sense literally anything. But for now, its scope is somewhat limited by real world and your imagination to use it.","title":"Ultimate sensor"},{"location":"UnlimitedPeripheralWorks/peripherals/ultimate_sensor/#supported-apis","text":"Configuration API Operation API","title":"Supported APIs"},{"location":"UnlimitedPeripheralWorks/peripherals/ultimate_sensor/#peripheral-methods","text":"Function Returns Description inspect(\"dimension\") Result [string] Returns dimension name inspect(\"biome\") Result [string] Returns biome name inspect(\"weather\") Result [string] Returns weather state: rain, thunder or stable inspect(\"orientation\") Result [number] Returns azimuth for peripheral orientation (block orientation for block, turtle facing for turtle and player orientation for pocket computer) inspect(\"time\") Result [number] Returns day time of world inspect(\"light\") Result [table] Returns information about light and sunlight of current position inspect(\"calendar\") Result [table] Returns information about current day number and moon phase inspect(\"chunk\") Result [table] Returns information about current chunk: is this is slime chunk and how many ores in this chunk analyze(\"dimension\") Result [table] Returns list of all dimension names listAnalyzers() table Returns list of all possible analyzers listInspectors() table Returns list of all possible inspectors","title":"Peripheral methods"},{"location":"UnlimitedPeripheralWorks/peripherals/universal_scanner/","text":"Universal scanner \u00b6 Picture Supported versions Forge : 1.19.4, 1.20.x Fabric : 1.19.4, 1.20.x Universal scanner, that can be used as a separate block or a pocket computer/turtle upgrade. This peripheral designed to provide detail important information about surrounding world. Supported APIs \u00b6 Configuration API Fuel API : for pocket computers in consumes player food as fuel Operation API Scan API : allow usage for blocks, entities and items.","title":"Universal scanner"},{"location":"UnlimitedPeripheralWorks/peripherals/universal_scanner/#universal-scanner","text":"Picture Supported versions Forge : 1.19.4, 1.20.x Fabric : 1.19.4, 1.20.x Universal scanner, that can be used as a separate block or a pocket computer/turtle upgrade. This peripheral designed to provide detail important information about surrounding world.","title":"Universal scanner"},{"location":"UnlimitedPeripheralWorks/peripherals/universal_scanner/#supported-apis","text":"Configuration API Fuel API : for pocket computers in consumes player food as fuel Operation API Scan API : allow usage for blocks, entities and items.","title":"Supported APIs"}]}